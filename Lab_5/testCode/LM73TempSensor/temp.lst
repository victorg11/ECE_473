
temp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00001134  000011c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001134  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000063  00800102  00800102  000011ca  2**0
                  ALLOC
  3 .stab         00002db4  00000000  00000000  000011cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001484  00000000  00000000  00003f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005404  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005418  2**2
                  CONTENTS, READONLY
  7 .debug_info   00000780  00000000  00000000  00005454  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000718  00000000  00000000  00005bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000062ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  00006306  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      20:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      28:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      30:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      40:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      48:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      84:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__vector_33>
      88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      8c:	21 07       	cpc	r18, r17
      8e:	f8 06       	cpc	r15, r24
      90:	f8 06       	cpc	r15, r24
      92:	f8 06       	cpc	r15, r24
      94:	f8 06       	cpc	r15, r24
      96:	f8 06       	cpc	r15, r24
      98:	f8 06       	cpc	r15, r24
      9a:	f8 06       	cpc	r15, r24
      9c:	21 07       	cpc	r18, r17
      9e:	f8 06       	cpc	r15, r24
      a0:	f8 06       	cpc	r15, r24
      a2:	f8 06       	cpc	r15, r24
      a4:	f8 06       	cpc	r15, r24
      a6:	f8 06       	cpc	r15, r24
      a8:	f8 06       	cpc	r15, r24
      aa:	f8 06       	cpc	r15, r24
      ac:	2b 07       	cpc	r18, r27
      ae:	f8 06       	cpc	r15, r24
      b0:	f8 06       	cpc	r15, r24
      b2:	f8 06       	cpc	r15, r24
      b4:	f8 06       	cpc	r15, r24
      b6:	f8 06       	cpc	r15, r24
      b8:	f8 06       	cpc	r15, r24
      ba:	f8 06       	cpc	r15, r24
      bc:	f8 06       	cpc	r15, r24
      be:	f8 06       	cpc	r15, r24
      c0:	f8 06       	cpc	r15, r24
      c2:	f8 06       	cpc	r15, r24
      c4:	f8 06       	cpc	r15, r24
      c6:	f8 06       	cpc	r15, r24
      c8:	f8 06       	cpc	r15, r24
      ca:	f8 06       	cpc	r15, r24
      cc:	2b 07       	cpc	r18, r27
      ce:	f8 06       	cpc	r15, r24
      d0:	f8 06       	cpc	r15, r24
      d2:	f8 06       	cpc	r15, r24
      d4:	f8 06       	cpc	r15, r24
      d6:	f8 06       	cpc	r15, r24
      d8:	f8 06       	cpc	r15, r24
      da:	f8 06       	cpc	r15, r24
      dc:	f8 06       	cpc	r15, r24
      de:	f8 06       	cpc	r15, r24
      e0:	f8 06       	cpc	r15, r24
      e2:	f8 06       	cpc	r15, r24
      e4:	f8 06       	cpc	r15, r24
      e6:	f8 06       	cpc	r15, r24
      e8:	f8 06       	cpc	r15, r24
      ea:	f8 06       	cpc	r15, r24
      ec:	42 07       	cpc	r20, r18
      ee:	f8 06       	cpc	r15, r24
      f0:	f8 06       	cpc	r15, r24
      f2:	f8 06       	cpc	r15, r24
      f4:	f8 06       	cpc	r15, r24
      f6:	f8 06       	cpc	r15, r24
      f8:	f8 06       	cpc	r15, r24
      fa:	f8 06       	cpc	r15, r24
      fc:	46 07       	cpc	r20, r22
      fe:	f8 06       	cpc	r15, r24
     100:	f8 06       	cpc	r15, r24
     102:	f8 06       	cpc	r15, r24
     104:	f8 06       	cpc	r15, r24
     106:	f8 06       	cpc	r15, r24
     108:	f8 06       	cpc	r15, r24
     10a:	f8 06       	cpc	r15, r24
     10c:	f8 06       	cpc	r15, r24
     10e:	f8 06       	cpc	r15, r24
     110:	f8 06       	cpc	r15, r24
     112:	f8 06       	cpc	r15, r24
     114:	f8 06       	cpc	r15, r24
     116:	f8 06       	cpc	r15, r24
     118:	f8 06       	cpc	r15, r24
     11a:	f8 06       	cpc	r15, r24
     11c:	54 07       	cpc	r21, r20
     11e:	f8 06       	cpc	r15, r24
     120:	f8 06       	cpc	r15, r24
     122:	f8 06       	cpc	r15, r24
     124:	f8 06       	cpc	r15, r24
     126:	f8 06       	cpc	r15, r24
     128:	f8 06       	cpc	r15, r24
     12a:	f8 06       	cpc	r15, r24
     12c:	12 07       	cpc	r17, r18

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d0 e1       	ldi	r29, 0x10	; 16
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	e4 e3       	ldi	r30, 0x34	; 52
     142:	f1 e1       	ldi	r31, 0x11	; 17
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	a2 30       	cpi	r26, 0x02	; 2
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	21 e0       	ldi	r18, 0x01	; 1
     156:	a2 e0       	ldi	r26, 0x02	; 2
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a5 36       	cpi	r26, 0x65	; 101
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 9e 07 	call	0xf3c	; 0xf3c <main>
     168:	0c 94 98 08 	jmp	0x1130	; 0x1130 <_exit>

0000016c <__bad_interrupt>:
     16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <spi_init>:
//***********************************************************************
//                            spi_init
//**********************************************************************
void spi_init(){
  //PORTB ouput: ss(pb0), MOSI(pb2), sclk(pb1)
  DDRB  |= (1<<BIT0)|(1<<BIT1)|(1<<BIT2);
     170:	87 b3       	in	r24, 0x17	; 23
     172:	87 60       	ori	r24, 0x07	; 7
     174:	87 bb       	out	0x17, r24	; 23
  SPCR   = (1<<SPE) | (1<<MSTR) ; //master mode, clk low on idle, leading edge sample
     176:	80 e5       	ldi	r24, 0x50	; 80
     178:	8d b9       	out	0x0d, r24	; 13
  SPSR   = (1<<SPI2X); //choose double speed operation
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	8e b9       	out	0x0e, r24	; 14
     17e:	08 95       	ret

00000180 <lcd_ports>:
   display to work correctly
 Parameters: NONE
 Return:void
 ***************************************************************/
 void lcd_ports(){
   DDRF  |= 0x08;  //port F bit 3 is enable for LCD
     180:	e1 e6       	ldi	r30, 0x61	; 97
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	88 60       	ori	r24, 0x08	; 8
     188:	80 83       	st	Z, r24
   PORTF &= 0xF7;  //port F bit 3 is initially low
     18a:	e2 e6       	ldi	r30, 0x62	; 98
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	87 7f       	andi	r24, 0xF7	; 247
     192:	80 83       	st	Z, r24
     194:	08 95       	ret

00000196 <send_lcd>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     196:	91 e0       	ldi	r25, 0x01	; 1
     198:	81 11       	cpse	r24, r1
     19a:	01 c0       	rjmp	.+2      	; 0x19e <send_lcd+0x8>
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     1a0:	77 9b       	sbis	0x0e, 7	; 14
     1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <send_lcd+0xa>
  SPDR = byte;                        //send payload
     1a4:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     1a6:	77 9b       	sbis	0x0e, 7	; 14
     1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <send_lcd+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     1aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     1ae:	88 60       	ori	r24, 0x08	; 8
     1b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     1b4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     1b8:	87 7f       	andi	r24, 0xF7	; 247
     1ba:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1be:	8f e9       	ldi	r24, 0x9F	; 159
     1c0:	9f e0       	ldi	r25, 0x0F	; 15
     1c2:	01 97       	sbiw	r24, 0x01	; 1
     1c4:	f1 f7       	brne	.-4      	; 0x1c2 <send_lcd+0x2c>
     1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <send_lcd+0x32>
     1c8:	00 00       	nop
     1ca:	08 95       	ret

000001cc <refresh_lcd>:

void refresh_lcd(char lcd_string_array[]) {

    static uint8_t index=0;           // index into string array 

    SPDR = 0x01; //set SR for data
     1cc:	21 e0       	ldi	r18, 0x01	; 1
     1ce:	2f b9       	out	0x0f, r18	; 15
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
     1d0:	77 9b       	sbis	0x0e, 7	; 14
     1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <refresh_lcd+0x4>
    SPDR = lcd_string_array[index];
     1d4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
     1d8:	fc 01       	movw	r30, r24
     1da:	e2 0f       	add	r30, r18
     1dc:	f1 1d       	adc	r31, r1
     1de:	80 81       	ld	r24, Z
     1e0:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
     1e2:	77 9b       	sbis	0x0e, 7	; 14
     1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <refresh_lcd+0x16>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     1e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     1ea:	88 60       	ori	r24, 0x08	; 8
     1ec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     1f0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     1f4:	87 7f       	andi	r24, 0xF7	; 247
     1f6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    SPDR = 0x01; //set SR for data
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    SPDR = lcd_string_array[index];
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    strobe_lcd();                   //write into LCD
    index++;                        //increment to next character
     1fa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
     1fe:	8f 5f       	subi	r24, 0xFF	; 255
     200:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
    if(index == 16) {_delay_us(40); home_line2();}           //on to 2nd line, 1st position 
     204:	80 31       	cpi	r24, 0x10	; 16
     206:	09 f1       	breq	.+66     	; 0x24a <refresh_lcd+0x7e>
    if(index == 32) {_delay_us(40); cursor_home(); index=0;} //back to 1st line, 1st position
     208:	80 32       	cpi	r24, 0x20	; 32
     20a:	09 f0       	breq	.+2      	; 0x20e <refresh_lcd+0x42>
     20c:	08 95       	ret
     20e:	95 ed       	ldi	r25, 0xD5	; 213
     210:	9a 95       	dec	r25
     212:	f1 f7       	brne	.-4      	; 0x210 <refresh_lcd+0x44>
     214:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     216:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     218:	77 9b       	sbis	0x0e, 7	; 14
     21a:	fe cf       	rjmp	.-4      	; 0x218 <refresh_lcd+0x4c>
  SPDR = byte;                        //send payload
     21c:	82 e0       	ldi	r24, 0x02	; 2
     21e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     220:	77 9b       	sbis	0x0e, 7	; 14
     222:	fe cf       	rjmp	.-4      	; 0x220 <refresh_lcd+0x54>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     224:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     228:	88 60       	ori	r24, 0x08	; 8
     22a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     22e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     232:	87 7f       	andi	r24, 0xF7	; 247
     234:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     238:	8f e9       	ldi	r24, 0x9F	; 159
     23a:	9f e0       	ldi	r25, 0x0F	; 15
     23c:	01 97       	sbiw	r24, 0x01	; 1
     23e:	f1 f7       	brne	.-4      	; 0x23c <refresh_lcd+0x70>
     240:	00 c0       	rjmp	.+0      	; 0x242 <refresh_lcd+0x76>
     242:	00 00       	nop
    SPDR = lcd_string_array[index];
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    strobe_lcd();                   //write into LCD
    index++;                        //increment to next character
    if(index == 16) {_delay_us(40); home_line2();}           //on to 2nd line, 1st position 
    if(index == 32) {_delay_us(40); cursor_home(); index=0;} //back to 1st line, 1st position
     244:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
     248:	08 95       	ret
     24a:	85 ed       	ldi	r24, 0xD5	; 213
     24c:	8a 95       	dec	r24
     24e:	f1 f7       	brne	.-4      	; 0x24c <refresh_lcd+0x80>
     250:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     252:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     254:	77 9b       	sbis	0x0e, 7	; 14
     256:	fe cf       	rjmp	.-4      	; 0x254 <refresh_lcd+0x88>
  SPDR = byte;                        //send payload
     258:	80 ec       	ldi	r24, 0xC0	; 192
     25a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     25c:	77 9b       	sbis	0x0e, 7	; 14
     25e:	fe cf       	rjmp	.-4      	; 0x25c <refresh_lcd+0x90>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     260:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     264:	88 60       	ori	r24, 0x08	; 8
     266:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     26a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     26e:	87 7f       	andi	r24, 0xF7	; 247
     270:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     274:	8f e9       	ldi	r24, 0x9F	; 159
     276:	9f e0       	ldi	r25, 0x0F	; 15
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	f1 f7       	brne	.-4      	; 0x278 <refresh_lcd+0xac>
     27c:	00 c0       	rjmp	.+0      	; 0x27e <refresh_lcd+0xb2>
     27e:	00 00       	nop
     280:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
     284:	c1 cf       	rjmp	.-126    	; 0x208 <refresh_lcd+0x3c>

00000286 <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
     286:	66 0f       	add	r22, r22
     288:	66 0f       	add	r22, r22
     28a:	66 0f       	add	r22, r22
     28c:	60 5c       	subi	r22, 0xC0	; 192
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     28e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     290:	77 9b       	sbis	0x0e, 7	; 14
     292:	fe cf       	rjmp	.-4      	; 0x290 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
     294:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     296:	77 9b       	sbis	0x0e, 7	; 14
     298:	fe cf       	rjmp	.-4      	; 0x296 <set_custom_character+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     29a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     29e:	28 60       	ori	r18, 0x08	; 8
     2a0:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2a4:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2a8:	27 7f       	andi	r18, 0xF7	; 247
     2aa:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2ae:	af e9       	ldi	r26, 0x9F	; 159
     2b0:	bf e0       	ldi	r27, 0x0F	; 15
     2b2:	11 97       	sbiw	r26, 0x01	; 1
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <set_custom_character+0x2c>
     2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <set_custom_character+0x32>
     2b8:	00 00       	nop
     2ba:	fc 01       	movw	r30, r24
     2bc:	9c 01       	movw	r18, r24
     2be:	28 5f       	subi	r18, 0xF8	; 248
     2c0:	3f 4f       	sbci	r19, 0xFF	; 255
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     2c2:	91 e0       	ldi	r25, 0x01	; 1
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
    for(i=0; i<8; i++){send_lcd(CHAR_BYTE, data[i], 100);}
     2c4:	81 91       	ld	r24, Z+
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     2c6:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     2c8:	77 9b       	sbis	0x0e, 7	; 14
     2ca:	fe cf       	rjmp	.-4      	; 0x2c8 <set_custom_character+0x42>
  SPDR = byte;                        //send payload
     2cc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     2ce:	77 9b       	sbis	0x0e, 7	; 14
     2d0:	fe cf       	rjmp	.-4      	; 0x2ce <set_custom_character+0x48>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     2d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2d6:	88 60       	ori	r24, 0x08	; 8
     2d8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2e0:	87 7f       	andi	r24, 0xF7	; 247
     2e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2e6:	af e9       	ldi	r26, 0x9F	; 159
     2e8:	bf e0       	ldi	r27, 0x0F	; 15
     2ea:	11 97       	sbiw	r26, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <set_custom_character+0x64>
     2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <set_custom_character+0x6a>
     2f0:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
    for(i=0; i<8; i++){send_lcd(CHAR_BYTE, data[i], 100);}
     2f2:	e2 17       	cp	r30, r18
     2f4:	f3 07       	cpc	r31, r19
     2f6:	31 f7       	brne	.-52     	; 0x2c4 <set_custom_character+0x3e>
}
     2f8:	08 95       	ret

000002fa <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40), 1000);
     2fa:	90 e4       	ldi	r25, 0x40	; 64
     2fc:	89 9f       	mul	r24, r25
     2fe:	60 0d       	add	r22, r0
     300:	11 24       	eor	r1, r1
     302:	60 5c       	subi	r22, 0xC0	; 192
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     304:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     306:	77 9b       	sbis	0x0e, 7	; 14
     308:	fe cf       	rjmp	.-4      	; 0x306 <set_cursor+0xc>
  SPDR = byte;                        //send payload
     30a:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     30c:	77 9b       	sbis	0x0e, 7	; 14
     30e:	fe cf       	rjmp	.-4      	; 0x30c <set_cursor+0x12>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     310:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     314:	88 60       	ori	r24, 0x08	; 8
     316:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     31a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     31e:	87 7f       	andi	r24, 0xF7	; 247
     320:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     324:	8f e9       	ldi	r24, 0x9F	; 159
     326:	9f e0       	ldi	r25, 0x0F	; 15
     328:	01 97       	sbiw	r24, 0x01	; 1
     32a:	f1 f7       	brne	.-4      	; 0x328 <set_cursor+0x2e>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <set_cursor+0x34>
     32e:	00 00       	nop
     330:	08 95       	ret

00000332 <uint2lcd>:
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
     332:	81 11       	cpse	r24, r1
     334:	19 c0       	rjmp	.+50     	; 0x368 <uint2lcd+0x36>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     33a:	77 9b       	sbis	0x0e, 7	; 14
     33c:	fe cf       	rjmp	.-4      	; 0x33a <uint2lcd+0x8>
  SPDR = byte;                        //send payload
     33e:	80 e3       	ldi	r24, 0x30	; 48
     340:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     342:	77 9b       	sbis	0x0e, 7	; 14
     344:	fe cf       	rjmp	.-4      	; 0x342 <uint2lcd+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     346:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     34a:	88 60       	ori	r24, 0x08	; 8
     34c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     350:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     354:	87 7f       	andi	r24, 0xF7	; 247
     356:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     35a:	8f e9       	ldi	r24, 0x9F	; 159
     35c:	9f e0       	ldi	r25, 0x0F	; 15
     35e:	01 97       	sbiw	r24, 0x01	; 1
     360:	f1 f7       	brne	.-4      	; 0x35e <uint2lcd+0x2c>
     362:	00 c0       	rjmp	.+0      	; 0x364 <uint2lcd+0x32>
     364:	00 00       	nop
     366:	08 95       	ret
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
     368:	84 36       	cpi	r24, 0x64	; 100
     36a:	b0 f4       	brcc	.+44     	; 0x398 <uint2lcd+0x66>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
     36c:	8a 30       	cpi	r24, 0x0A	; 10
     36e:	90 f5       	brcc	.+100    	; 0x3d4 <uint2lcd+0xa2>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     374:	77 9b       	sbis	0x0e, 7	; 14
     376:	fe cf       	rjmp	.-4      	; 0x374 <uint2lcd+0x42>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    , 100); }
     378:	9d ec       	ldi	r25, 0xCD	; 205
     37a:	89 9f       	mul	r24, r25
     37c:	91 2d       	mov	r25, r1
     37e:	11 24       	eor	r1, r1
     380:	96 95       	lsr	r25
     382:	96 95       	lsr	r25
     384:	96 95       	lsr	r25
     386:	fa e0       	ldi	r31, 0x0A	; 10
     388:	9f 9f       	mul	r25, r31
     38a:	80 19       	sub	r24, r0
     38c:	11 24       	eor	r1, r1
     38e:	80 5d       	subi	r24, 0xD0	; 208


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     390:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     392:	77 9b       	sbis	0x0e, 7	; 14
     394:	fe cf       	rjmp	.-4      	; 0x392 <uint2lcd+0x60>
     396:	d7 cf       	rjmp	.-82     	; 0x346 <uint2lcd+0x14>
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
     398:	99 e2       	ldi	r25, 0x29	; 41
     39a:	89 9f       	mul	r24, r25
     39c:	91 2d       	mov	r25, r1
     39e:	11 24       	eor	r1, r1
     3a0:	92 95       	swap	r25
     3a2:	9f 70       	andi	r25, 0x0F	; 15
     3a4:	90 5d       	subi	r25, 0xD0	; 208
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     3a6:	21 e0       	ldi	r18, 0x01	; 1
     3a8:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     3aa:	77 9b       	sbis	0x0e, 7	; 14
     3ac:	fe cf       	rjmp	.-4      	; 0x3aa <uint2lcd+0x78>
  SPDR = byte;                        //send payload
     3ae:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     3b0:	77 9b       	sbis	0x0e, 7	; 14
     3b2:	fe cf       	rjmp	.-4      	; 0x3b0 <uint2lcd+0x7e>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     3b4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3b8:	98 60       	ori	r25, 0x08	; 8
     3ba:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3be:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3c2:	97 7f       	andi	r25, 0xF7	; 247
     3c4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3c8:	ef e9       	ldi	r30, 0x9F	; 159
     3ca:	ff e0       	ldi	r31, 0x0F	; 15
     3cc:	31 97       	sbiw	r30, 0x01	; 1
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <uint2lcd+0x9a>
     3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <uint2lcd+0xa0>
     3d2:	00 00       	nop
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
     3d4:	99 e2       	ldi	r25, 0x29	; 41
     3d6:	89 9f       	mul	r24, r25
     3d8:	91 2d       	mov	r25, r1
     3da:	11 24       	eor	r1, r1
     3dc:	92 95       	swap	r25
     3de:	9f 70       	andi	r25, 0x0F	; 15
     3e0:	28 2f       	mov	r18, r24
     3e2:	f4 e6       	ldi	r31, 0x64	; 100
     3e4:	9f 9f       	mul	r25, r31
     3e6:	20 19       	sub	r18, r0
     3e8:	11 24       	eor	r1, r1
     3ea:	92 2f       	mov	r25, r18
     3ec:	2d ec       	ldi	r18, 0xCD	; 205
     3ee:	92 9f       	mul	r25, r18
     3f0:	91 2d       	mov	r25, r1
     3f2:	11 24       	eor	r1, r1
     3f4:	96 95       	lsr	r25
     3f6:	96 95       	lsr	r25
     3f8:	96 95       	lsr	r25
     3fa:	90 5d       	subi	r25, 0xD0	; 208
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     3fc:	21 e0       	ldi	r18, 0x01	; 1
     3fe:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     400:	77 9b       	sbis	0x0e, 7	; 14
     402:	fe cf       	rjmp	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
  SPDR = byte;                        //send payload
     404:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     406:	77 9b       	sbis	0x0e, 7	; 14
     408:	fe cf       	rjmp	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     40a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     40e:	98 60       	ori	r25, 0x08	; 8
     410:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     414:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     418:	97 7f       	andi	r25, 0xF7	; 247
     41a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     41e:	ef e9       	ldi	r30, 0x9F	; 159
     420:	ff e0       	ldi	r31, 0x0F	; 15
     422:	31 97       	sbiw	r30, 0x01	; 1
     424:	f1 f7       	brne	.-4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     426:	00 c0       	rjmp	.+0      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     428:	00 00       	nop
     42a:	a2 cf       	rjmp	.-188    	; 0x370 <uint2lcd+0x3e>

0000042c <int2lcd>:
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    if(number < 0){send_lcd(CHAR_BYTE, '-', 100); uint2lcd(~number+1);}    //take 2's complement of number and display
     42c:	87 ff       	sbrs	r24, 7
    else                                    {uint2lcd(number);}
     42e:	0c 94 99 01 	jmp	0x332	; 0x332 <uint2lcd>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     436:	77 9b       	sbis	0x0e, 7	; 14
     438:	fe cf       	rjmp	.-4      	; 0x436 <int2lcd+0xa>
  SPDR = byte;                        //send payload
     43a:	9d e2       	ldi	r25, 0x2D	; 45
     43c:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     43e:	77 9b       	sbis	0x0e, 7	; 14
     440:	fe cf       	rjmp	.-4      	; 0x43e <int2lcd+0x12>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     442:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     446:	98 60       	ori	r25, 0x08	; 8
     448:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     44c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     450:	97 7f       	andi	r25, 0xF7	; 247
     452:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     456:	ef e9       	ldi	r30, 0x9F	; 159
     458:	ff e0       	ldi	r31, 0x0F	; 15
     45a:	31 97       	sbiw	r30, 0x01	; 1
     45c:	f1 f7       	brne	.-4      	; 0x45a <int2lcd+0x2e>
     45e:	00 c0       	rjmp	.+0      	; 0x460 <int2lcd+0x34>
     460:	00 00       	nop
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    if(number < 0){send_lcd(CHAR_BYTE, '-', 100); uint2lcd(~number+1);}    //take 2's complement of number and display
     462:	81 95       	neg	r24
     464:	0c 94 99 01 	jmp	0x332	; 0x332 <uint2lcd>

00000468 <cursor_on>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     468:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     46a:	77 9b       	sbis	0x0e, 7	; 14
     46c:	fe cf       	rjmp	.-4      	; 0x46a <cursor_on+0x2>
  SPDR = byte;                        //send payload
     46e:	8e e0       	ldi	r24, 0x0E	; 14
     470:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     472:	77 9b       	sbis	0x0e, 7	; 14
     474:	fe cf       	rjmp	.-4      	; 0x472 <cursor_on+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     476:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     47a:	88 60       	ori	r24, 0x08	; 8
     47c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     480:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     484:	87 7f       	andi	r24, 0xF7	; 247
     486:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     48a:	8f e9       	ldi	r24, 0x9F	; 159
     48c:	9f e0       	ldi	r25, 0x0F	; 15
     48e:	01 97       	sbiw	r24, 0x01	; 1
     490:	f1 f7       	brne	.-4      	; 0x48e <cursor_on+0x26>
     492:	00 c0       	rjmp	.+0      	; 0x494 <cursor_on+0x2c>
     494:	00 00       	nop
     496:	08 95       	ret

00000498 <cursor_off>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     498:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     49a:	77 9b       	sbis	0x0e, 7	; 14
     49c:	fe cf       	rjmp	.-4      	; 0x49a <cursor_off+0x2>
  SPDR = byte;                        //send payload
     49e:	8c e0       	ldi	r24, 0x0C	; 12
     4a0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4a2:	77 9b       	sbis	0x0e, 7	; 14
     4a4:	fe cf       	rjmp	.-4      	; 0x4a2 <cursor_off+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     4a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4aa:	88 60       	ori	r24, 0x08	; 8
     4ac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4b4:	87 7f       	andi	r24, 0xF7	; 247
     4b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4ba:	8f e9       	ldi	r24, 0x9F	; 159
     4bc:	9f e0       	ldi	r25, 0x0F	; 15
     4be:	01 97       	sbiw	r24, 0x01	; 1
     4c0:	f1 f7       	brne	.-4      	; 0x4be <cursor_off+0x26>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <cursor_off+0x2c>
     4c4:	00 00       	nop
     4c6:	08 95       	ret

000004c8 <shift_right>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     4c8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4ca:	77 9b       	sbis	0x0e, 7	; 14
     4cc:	fe cf       	rjmp	.-4      	; 0x4ca <shift_right+0x2>
  SPDR = byte;                        //send payload
     4ce:	8e e1       	ldi	r24, 0x1E	; 30
     4d0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4d2:	77 9b       	sbis	0x0e, 7	; 14
     4d4:	fe cf       	rjmp	.-4      	; 0x4d2 <shift_right+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     4d6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4da:	88 60       	ori	r24, 0x08	; 8
     4dc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4e4:	87 7f       	andi	r24, 0xF7	; 247
     4e6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4ea:	8f e9       	ldi	r24, 0x9F	; 159
     4ec:	9f e0       	ldi	r25, 0x0F	; 15
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	f1 f7       	brne	.-4      	; 0x4ee <shift_right+0x26>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <shift_right+0x2c>
     4f4:	00 00       	nop
     4f6:	08 95       	ret

000004f8 <shift_left>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     4f8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4fa:	77 9b       	sbis	0x0e, 7	; 14
     4fc:	fe cf       	rjmp	.-4      	; 0x4fa <shift_left+0x2>
  SPDR = byte;                        //send payload
     4fe:	88 e1       	ldi	r24, 0x18	; 24
     500:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     502:	77 9b       	sbis	0x0e, 7	; 14
     504:	fe cf       	rjmp	.-4      	; 0x502 <shift_left+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     506:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     50a:	88 60       	ori	r24, 0x08	; 8
     50c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     510:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     514:	87 7f       	andi	r24, 0xF7	; 247
     516:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     51a:	8f e9       	ldi	r24, 0x9F	; 159
     51c:	9f e0       	ldi	r25, 0x0F	; 15
     51e:	01 97       	sbiw	r24, 0x01	; 1
     520:	f1 f7       	brne	.-4      	; 0x51e <shift_left+0x26>
     522:	00 c0       	rjmp	.+0      	; 0x524 <shift_left+0x2c>
     524:	00 00       	nop
     526:	08 95       	ret

00000528 <strobe_lcd>:
     528:	e2 e6       	ldi	r30, 0x62	; 98
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	88 60       	ori	r24, 0x08	; 8
     530:	80 83       	st	Z, r24
     532:	80 81       	ld	r24, Z
     534:	87 7f       	andi	r24, 0xF7	; 247
     536:	80 83       	st	Z, r24
     538:	08 95       	ret

0000053a <clear_display>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     53a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     53c:	77 9b       	sbis	0x0e, 7	; 14
     53e:	fe cf       	rjmp	.-4      	; 0x53c <clear_display+0x2>
  SPDR = byte;                        //send payload
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     544:	77 9b       	sbis	0x0e, 7	; 14
     546:	fe cf       	rjmp	.-4      	; 0x544 <clear_display+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     548:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     54c:	88 60       	ori	r24, 0x08	; 8
     54e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     552:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     556:	87 7f       	andi	r24, 0xF7	; 247
     558:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     55c:	8f e9       	ldi	r24, 0x9F	; 159
     55e:	9f e0       	ldi	r25, 0x0F	; 15
     560:	01 97       	sbiw	r24, 0x01	; 1
     562:	f1 f7       	brne	.-4      	; 0x560 <clear_display+0x26>
     564:	00 c0       	rjmp	.+0      	; 0x566 <clear_display+0x2c>
     566:	00 00       	nop
     568:	08 95       	ret

0000056a <cursor_home>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     56a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     56c:	77 9b       	sbis	0x0e, 7	; 14
     56e:	fe cf       	rjmp	.-4      	; 0x56c <cursor_home+0x2>
  SPDR = byte;                        //send payload
     570:	82 e0       	ldi	r24, 0x02	; 2
     572:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     574:	77 9b       	sbis	0x0e, 7	; 14
     576:	fe cf       	rjmp	.-4      	; 0x574 <cursor_home+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     578:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     57c:	88 60       	ori	r24, 0x08	; 8
     57e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     582:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     586:	87 7f       	andi	r24, 0xF7	; 247
     588:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     58c:	8f e9       	ldi	r24, 0x9F	; 159
     58e:	9f e0       	ldi	r25, 0x0F	; 15
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	f1 f7       	brne	.-4      	; 0x590 <cursor_home+0x26>
     594:	00 c0       	rjmp	.+0      	; 0x596 <cursor_home+0x2c>
     596:	00 00       	nop
     598:	08 95       	ret

0000059a <home_line2>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     59a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     59c:	77 9b       	sbis	0x0e, 7	; 14
     59e:	fe cf       	rjmp	.-4      	; 0x59c <home_line2+0x2>
  SPDR = byte;                        //send payload
     5a0:	80 ec       	ldi	r24, 0xC0	; 192
     5a2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     5a4:	77 9b       	sbis	0x0e, 7	; 14
     5a6:	fe cf       	rjmp	.-4      	; 0x5a4 <home_line2+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     5a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5ac:	88 60       	ori	r24, 0x08	; 8
     5ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5b2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5b6:	87 7f       	andi	r24, 0xF7	; 247
     5b8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5bc:	8f e9       	ldi	r24, 0x9F	; 159
     5be:	9f e0       	ldi	r25, 0x0F	; 15
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	f1 f7       	brne	.-4      	; 0x5c0 <home_line2+0x26>
     5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <home_line2+0x2c>
     5c6:	00 00       	nop
     5c8:	08 95       	ret

000005ca <fill_spaces>:
 
//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
     5ca:	90 e1       	ldi	r25, 0x10	; 16
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     5cc:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     5ce:	20 e2       	ldi	r18, 0x20	; 32
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     5d0:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     5d2:	77 9b       	sbis	0x0e, 7	; 14
     5d4:	fe cf       	rjmp	.-4      	; 0x5d2 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
     5d6:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     5d8:	77 9b       	sbis	0x0e, 7	; 14
     5da:	fe cf       	rjmp	.-4      	; 0x5d8 <fill_spaces+0xe>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     5dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5e0:	88 60       	ori	r24, 0x08	; 8
     5e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5ea:	87 7f       	andi	r24, 0xF7	; 247
     5ec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5f0:	ef e9       	ldi	r30, 0x9F	; 159
     5f2:	ff e0       	ldi	r31, 0x0F	; 15
     5f4:	31 97       	sbiw	r30, 0x01	; 1
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <fill_spaces+0x2a>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <fill_spaces+0x30>
     5fa:	00 00       	nop
     5fc:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     5fe:	41 f7       	brne	.-48     	; 0x5d0 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ',100); //100us wait between characters
	}
}  
     600:	08 95       	ret

00000602 <char2lcd>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     606:	77 9b       	sbis	0x0e, 7	; 14
     608:	fe cf       	rjmp	.-4      	; 0x606 <char2lcd+0x4>
  SPDR = byte;                        //send payload
     60a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     60c:	77 9b       	sbis	0x0e, 7	; 14
     60e:	fe cf       	rjmp	.-4      	; 0x60c <char2lcd+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     610:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     614:	88 60       	ori	r24, 0x08	; 8
     616:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     61a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     61e:	87 7f       	andi	r24, 0xF7	; 247
     620:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     624:	8f e9       	ldi	r24, 0x9F	; 159
     626:	9f e0       	ldi	r25, 0x0F	; 15
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	f1 f7       	brne	.-4      	; 0x628 <char2lcd+0x26>
     62c:	00 c0       	rjmp	.+0      	; 0x62e <char2lcd+0x2c>
     62e:	00 00       	nop
     630:	08 95       	ret

00000632 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
     632:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}                  
     634:	40 e0       	ldi	r20, 0x00	; 0
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	60 e0       	ldi	r22, 0x00	; 0
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     63a:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}                  
     63c:	df 01       	movw	r26, r30
     63e:	a4 0f       	add	r26, r20
     640:	b5 1f       	adc	r27, r21
     642:	8c 91       	ld	r24, X
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     644:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     646:	77 9b       	sbis	0x0e, 7	; 14
     648:	fe cf       	rjmp	.-4      	; 0x646 <string2lcd+0x14>
  SPDR = byte;                        //send payload
     64a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     64c:	77 9b       	sbis	0x0e, 7	; 14
     64e:	fe cf       	rjmp	.-4      	; 0x64c <string2lcd+0x1a>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     650:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     654:	98 60       	ori	r25, 0x08	; 8
     656:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     65a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     65e:	97 7f       	andi	r25, 0xF7	; 247
     660:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     664:	8f e9       	ldi	r24, 0x9F	; 159
     666:	9f e0       	ldi	r25, 0x0F	; 15
     668:	01 97       	sbiw	r24, 0x01	; 1
     66a:	f1 f7       	brne	.-4      	; 0x668 <string2lcd+0x36>
     66c:	00 c0       	rjmp	.+0      	; 0x66e <string2lcd+0x3c>
     66e:	00 00       	nop
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}                  
     670:	6f 5f       	subi	r22, 0xFF	; 255
     672:	46 2f       	mov	r20, r22
     674:	50 e0       	ldi	r21, 0x00	; 0
     676:	df 01       	movw	r26, r30
     678:	0d 90       	ld	r0, X+
     67a:	00 20       	and	r0, r0
     67c:	e9 f7       	brne	.-6      	; 0x678 <string2lcd+0x46>
     67e:	9d 01       	movw	r18, r26
     680:	2e 1b       	sub	r18, r30
     682:	3f 0b       	sbc	r19, r31
     684:	22 50       	subi	r18, 0x02	; 2
     686:	31 09       	sbc	r19, r1
     688:	24 17       	cp	r18, r20
     68a:	35 07       	cpc	r19, r21
     68c:	b8 f6       	brcc	.-82     	; 0x63c <string2lcd+0xa>
} 
     68e:	08 95       	ret

00000690 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     690:	8f ef       	ldi	r24, 0xFF	; 255
     692:	99 ef       	ldi	r25, 0xF9	; 249
     694:	01 97       	sbiw	r24, 0x01	; 1
     696:	f1 f7       	brne	.-4      	; 0x694 <lcd_init+0x4>
     698:	00 c0       	rjmp	.+0      	; 0x69a <lcd_init+0xa>
     69a:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! should not be here.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     69c:	88 e0       	ldi	r24, 0x08	; 8
     69e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     6a2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6a4:	77 9b       	sbis	0x0e, 7	; 14
     6a6:	fe cf       	rjmp	.-4      	; 0x6a4 <lcd_init+0x14>
  SPDR = byte;                        //send payload
     6a8:	80 e3       	ldi	r24, 0x30	; 48
     6aa:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6ac:	77 9b       	sbis	0x0e, 7	; 14
     6ae:	fe cf       	rjmp	.-4      	; 0x6ac <lcd_init+0x1c>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     6b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6b4:	88 60       	ori	r24, 0x08	; 8
     6b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6ba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6be:	87 7f       	andi	r24, 0xF7	; 247
     6c0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6c4:	8f e9       	ldi	r24, 0x9F	; 159
     6c6:	9f e0       	ldi	r25, 0x0F	; 15
     6c8:	01 97       	sbiw	r24, 0x01	; 1
     6ca:	f1 f7       	brne	.-4      	; 0x6c8 <lcd_init+0x38>
     6cc:	00 c0       	rjmp	.+0      	; 0x6ce <lcd_init+0x3e>
     6ce:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     6d0:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6d2:	77 9b       	sbis	0x0e, 7	; 14
     6d4:	fe cf       	rjmp	.-4      	; 0x6d2 <lcd_init+0x42>
  SPDR = byte;                        //send payload
     6d6:	80 e3       	ldi	r24, 0x30	; 48
     6d8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6da:	77 9b       	sbis	0x0e, 7	; 14
     6dc:	fe cf       	rjmp	.-4      	; 0x6da <lcd_init+0x4a>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     6de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6e2:	88 60       	ori	r24, 0x08	; 8
     6e4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6e8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6ec:	87 7f       	andi	r24, 0xF7	; 247
     6ee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6f2:	8f e9       	ldi	r24, 0x9F	; 159
     6f4:	9f e0       	ldi	r25, 0x0F	; 15
     6f6:	01 97       	sbiw	r24, 0x01	; 1
     6f8:	f1 f7       	brne	.-4      	; 0x6f6 <lcd_init+0x66>
     6fa:	00 c0       	rjmp	.+0      	; 0x6fc <lcd_init+0x6c>
     6fc:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     6fe:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     700:	77 9b       	sbis	0x0e, 7	; 14
     702:	fe cf       	rjmp	.-4      	; 0x700 <lcd_init+0x70>
  SPDR = byte;                        //send payload
     704:	80 e3       	ldi	r24, 0x30	; 48
     706:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     708:	77 9b       	sbis	0x0e, 7	; 14
     70a:	fe cf       	rjmp	.-4      	; 0x708 <lcd_init+0x78>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     70c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     710:	88 60       	ori	r24, 0x08	; 8
     712:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     716:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     71a:	87 7f       	andi	r24, 0xF7	; 247
     71c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     720:	8f e9       	ldi	r24, 0x9F	; 159
     722:	9f e0       	ldi	r25, 0x0F	; 15
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	f1 f7       	brne	.-4      	; 0x724 <lcd_init+0x94>
     728:	00 c0       	rjmp	.+0      	; 0x72a <lcd_init+0x9a>
     72a:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     72c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     72e:	77 9b       	sbis	0x0e, 7	; 14
     730:	fe cf       	rjmp	.-4      	; 0x72e <lcd_init+0x9e>
  SPDR = byte;                        //send payload
     732:	88 e3       	ldi	r24, 0x38	; 56
     734:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     736:	77 9b       	sbis	0x0e, 7	; 14
     738:	fe cf       	rjmp	.-4      	; 0x736 <lcd_init+0xa6>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     73a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     73e:	88 60       	ori	r24, 0x08	; 8
     740:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     744:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     748:	87 7f       	andi	r24, 0xF7	; 247
     74a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     74e:	8f e9       	ldi	r24, 0x9F	; 159
     750:	9f e0       	ldi	r25, 0x0F	; 15
     752:	01 97       	sbiw	r24, 0x01	; 1
     754:	f1 f7       	brne	.-4      	; 0x752 <lcd_init+0xc2>
     756:	00 c0       	rjmp	.+0      	; 0x758 <lcd_init+0xc8>
     758:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     75a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     75c:	77 9b       	sbis	0x0e, 7	; 14
     75e:	fe cf       	rjmp	.-4      	; 0x75c <lcd_init+0xcc>
  SPDR = byte;                        //send payload
     760:	88 e0       	ldi	r24, 0x08	; 8
     762:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     764:	77 9b       	sbis	0x0e, 7	; 14
     766:	fe cf       	rjmp	.-4      	; 0x764 <lcd_init+0xd4>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     768:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     76c:	88 60       	ori	r24, 0x08	; 8
     76e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     772:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     776:	87 7f       	andi	r24, 0xF7	; 247
     778:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     77c:	8f e9       	ldi	r24, 0x9F	; 159
     77e:	9f e0       	ldi	r25, 0x0F	; 15
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <lcd_init+0xf0>
     784:	00 c0       	rjmp	.+0      	; 0x786 <lcd_init+0xf6>
     786:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     788:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     78a:	77 9b       	sbis	0x0e, 7	; 14
     78c:	fe cf       	rjmp	.-4      	; 0x78a <lcd_init+0xfa>
  SPDR = byte;                        //send payload
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     792:	77 9b       	sbis	0x0e, 7	; 14
     794:	fe cf       	rjmp	.-4      	; 0x792 <lcd_init+0x102>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     796:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     79a:	88 60       	ori	r24, 0x08	; 8
     79c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7a0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7a4:	87 7f       	andi	r24, 0xF7	; 247
     7a6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7aa:	8f e9       	ldi	r24, 0x9F	; 159
     7ac:	9f e0       	ldi	r25, 0x0F	; 15
     7ae:	01 97       	sbiw	r24, 0x01	; 1
     7b0:	f1 f7       	brne	.-4      	; 0x7ae <lcd_init+0x11e>
     7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <lcd_init+0x124>
     7b4:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     7b6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7b8:	77 9b       	sbis	0x0e, 7	; 14
     7ba:	fe cf       	rjmp	.-4      	; 0x7b8 <lcd_init+0x128>
  SPDR = byte;                        //send payload
     7bc:	86 e0       	ldi	r24, 0x06	; 6
     7be:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7c0:	77 9b       	sbis	0x0e, 7	; 14
     7c2:	fe cf       	rjmp	.-4      	; 0x7c0 <lcd_init+0x130>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     7c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7c8:	88 60       	ori	r24, 0x08	; 8
     7ca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7ce:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7d2:	87 7f       	andi	r24, 0xF7	; 247
     7d4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7d8:	8f e9       	ldi	r24, 0x9F	; 159
     7da:	9f e0       	ldi	r25, 0x0F	; 15
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <lcd_init+0x14c>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <lcd_init+0x152>
     7e2:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     7e4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7e6:	77 9b       	sbis	0x0e, 7	; 14
     7e8:	fe cf       	rjmp	.-4      	; 0x7e6 <lcd_init+0x156>
  SPDR = byte;                        //send payload
     7ea:	8c e0       	ldi	r24, 0x0C	; 12
     7ec:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7ee:	77 9b       	sbis	0x0e, 7	; 14
     7f0:	fe cf       	rjmp	.-4      	; 0x7ee <lcd_init+0x15e>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     7f2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7f6:	88 60       	ori	r24, 0x08	; 8
     7f8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7fc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     800:	87 7f       	andi	r24, 0xF7	; 247
     802:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     806:	8f e9       	ldi	r24, 0x9F	; 159
     808:	9f e0       	ldi	r25, 0x0F	; 15
     80a:	01 97       	sbiw	r24, 0x01	; 1
     80c:	f1 f7       	brne	.-4      	; 0x80a <lcd_init+0x17a>
     80e:	00 c0       	rjmp	.+0      	; 0x810 <lcd_init+0x180>
     810:	00 00       	nop
     812:	08 95       	ret

00000814 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
     814:	4f 92       	push	r4
     816:	5f 92       	push	r5
     818:	6f 92       	push	r6
     81a:	7f 92       	push	r7
     81c:	8f 92       	push	r8
     81e:	9f 92       	push	r9
     820:	af 92       	push	r10
     822:	bf 92       	push	r11
     824:	cf 92       	push	r12
     826:	df 92       	push	r13
     828:	ef 92       	push	r14
     82a:	ff 92       	push	r15
     82c:	0f 93       	push	r16
     82e:	1f 93       	push	r17
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	69 97       	sbiw	r28, 0x19	; 25
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	de bf       	out	0x3e, r29	; 62
     840:	0f be       	out	0x3f, r0	; 63
     842:	cd bf       	out	0x3d, r28	; 61
     844:	14 2f       	mov	r17, r20
     846:	42 2e       	mov	r4, r18
     848:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
     84a:	00 23       	and	r16, r16
     84c:	79 f0       	breq	.+30     	; 0x86c <lcd_int32+0x58>
        bSigned = (qr.quot<0);
     84e:	6b 01       	movw	r12, r22
     850:	7c 01       	movw	r14, r24
     852:	cc 24       	eor	r12, r12
     854:	f7 fc       	sbrc	r15, 7
     856:	c3 94       	inc	r12
     858:	dd 24       	eor	r13, r13
     85a:	ee 24       	eor	r14, r14
     85c:	ff 24       	eor	r15, r15
     85e:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
     860:	6b 01       	movw	r12, r22
     862:	7c 01       	movw	r14, r24
     864:	97 fd       	sbrc	r25, 7
     866:	a5 c0       	rjmp	.+330    	; 0x9b2 <lcd_int32+0x19e>
     868:	c7 01       	movw	r24, r14
     86a:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
     86c:	44 20       	and	r4, r4
     86e:	09 f4       	brne	.+2      	; 0x872 <lcd_int32+0x5e>
     870:	98 c0       	rjmp	.+304    	; 0x9a2 <lcd_int32+0x18e>
     872:	9e 01       	movw	r18, r28
     874:	2f 5f       	subi	r18, 0xFF	; 255
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	59 01       	movw	r10, r18
     87a:	49 01       	movw	r8, r18
     87c:	66 24       	eor	r6, r6
     87e:	6a 94       	dec	r6
     880:	64 0c       	add	r6, r4
     882:	71 2c       	mov	r7, r1
     884:	3f ef       	ldi	r19, 0xFF	; 255
     886:	63 1a       	sub	r6, r19
     888:	73 0a       	sbc	r7, r19
     88a:	6a 0c       	add	r6, r10
     88c:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
     88e:	2a e0       	ldi	r18, 0x0A	; 10
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__divmodsi4>
     89a:	e6 2f       	mov	r30, r22
     89c:	2a 8b       	std	Y+18, r18	; 0x12
     89e:	3b 8b       	std	Y+19, r19	; 0x13
     8a0:	4c 8b       	std	Y+20, r20	; 0x14
     8a2:	5d 8b       	std	Y+21, r21	; 0x15
     8a4:	6a 89       	ldd	r22, Y+18	; 0x12
     8a6:	7b 89       	ldd	r23, Y+19	; 0x13
     8a8:	8c 89       	ldd	r24, Y+20	; 0x14
     8aa:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     8ac:	20 e3       	ldi	r18, 0x30	; 48
     8ae:	2e 0f       	add	r18, r30
     8b0:	f4 01       	movw	r30, r8
     8b2:	21 93       	st	Z+, r18
     8b4:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
     8b6:	6e 16       	cp	r6, r30
     8b8:	7f 06       	cpc	r7, r31
     8ba:	49 f7       	brne	.-46     	; 0x88e <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
     8bc:	99 24       	eor	r9, r9
     8be:	93 94       	inc	r9
     8c0:	94 0c       	add	r9, r4
     8c2:	f5 01       	movw	r30, r10
     8c4:	e4 0d       	add	r30, r4
     8c6:	f1 1d       	adc	r31, r1
     8c8:	2e e2       	ldi	r18, 0x2E	; 46
     8ca:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
     8cc:	2a e0       	ldi	r18, 0x0A	; 10
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__divmodsi4>
     8d8:	e6 2f       	mov	r30, r22
     8da:	2a 8b       	std	Y+18, r18	; 0x12
     8dc:	3b 8b       	std	Y+19, r19	; 0x13
     8de:	4c 8b       	std	Y+20, r20	; 0x14
     8e0:	5d 8b       	std	Y+21, r21	; 0x15
     8e2:	6e 8b       	std	Y+22, r22	; 0x16
     8e4:	7f 8b       	std	Y+23, r23	; 0x17
     8e6:	88 8f       	std	Y+24, r24	; 0x18
     8e8:	99 8f       	std	Y+25, r25	; 0x19
     8ea:	6a 89       	ldd	r22, Y+18	; 0x12
     8ec:	7b 89       	ldd	r23, Y+19	; 0x13
     8ee:	8c 89       	ldd	r24, Y+20	; 0x14
     8f0:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     8f2:	31 e0       	ldi	r19, 0x01	; 1
     8f4:	39 0d       	add	r19, r9
     8f6:	d5 01       	movw	r26, r10
     8f8:	a9 0d       	add	r26, r9
     8fa:	b1 1d       	adc	r27, r1
     8fc:	e0 5d       	subi	r30, 0xD0	; 208
     8fe:	ec 93       	st	X, r30
     900:	93 2e       	mov	r9, r19
        }while(qr.quot);
     902:	61 15       	cp	r22, r1
     904:	71 05       	cpc	r23, r1
     906:	81 05       	cpc	r24, r1
     908:	91 05       	cpc	r25, r1
     90a:	01 f7       	brne	.-64     	; 0x8cc <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
     90c:	11 23       	and	r17, r17
     90e:	61 f0       	breq	.+24     	; 0x928 <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
     910:	51 10       	cpse	r5, r1
     912:	4d c0       	rjmp	.+154    	; 0x9ae <lcd_int32+0x19a>
     914:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
     916:	31 17       	cp	r19, r17
     918:	38 f4       	brcc	.+14     	; 0x928 <lcd_int32+0x114>
     91a:	f5 01       	movw	r30, r10
     91c:	e3 0f       	add	r30, r19
     91e:	f1 1d       	adc	r31, r1
     920:	90 83       	st	Z, r25
     922:	3f 5f       	subi	r19, 0xFF	; 255
     924:	13 13       	cpse	r17, r19
     926:	f9 cf       	rjmp	.-14     	; 0x91a <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
     928:	00 23       	and	r16, r16
     92a:	31 f0       	breq	.+12     	; 0x938 <lcd_int32+0x124>
     92c:	f5 01       	movw	r30, r10
     92e:	e3 0f       	add	r30, r19
     930:	f1 1d       	adc	r31, r1
     932:	9d e2       	ldi	r25, 0x2D	; 45
     934:	90 83       	st	Z, r25
     936:	3f 5f       	subi	r19, 0xFF	; 255
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     938:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
     93a:	31 50       	subi	r19, 0x01	; 1
     93c:	f5 01       	movw	r30, r10
     93e:	e3 0f       	add	r30, r19
     940:	f1 1d       	adc	r31, r1
     942:	90 81       	ld	r25, Z
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     944:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     946:	77 9b       	sbis	0x0e, 7	; 14
     948:	fe cf       	rjmp	.-4      	; 0x946 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
     94a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     94c:	77 9b       	sbis	0x0e, 7	; 14
     94e:	fe cf       	rjmp	.-4      	; 0x94c <lcd_int32+0x138>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     950:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     954:	98 60       	ori	r25, 0x08	; 8
     956:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     95a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     95e:	97 7f       	andi	r25, 0xF7	; 247
     960:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     964:	8f e9       	ldi	r24, 0x9F	; 159
     966:	9f e0       	ldi	r25, 0x0F	; 15
     968:	01 97       	sbiw	r24, 0x01	; 1
     96a:	f1 f7       	brne	.-4      	; 0x968 <lcd_int32+0x154>
     96c:	00 c0       	rjmp	.+0      	; 0x96e <lcd_int32+0x15a>
     96e:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
     970:	31 11       	cpse	r19, r1
     972:	e3 cf       	rjmp	.-58     	; 0x93a <lcd_int32+0x126>

}
     974:	69 96       	adiw	r28, 0x19	; 25
     976:	0f b6       	in	r0, 0x3f	; 63
     978:	f8 94       	cli
     97a:	de bf       	out	0x3e, r29	; 62
     97c:	0f be       	out	0x3f, r0	; 63
     97e:	cd bf       	out	0x3d, r28	; 61
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	ff 90       	pop	r15
     98a:	ef 90       	pop	r14
     98c:	df 90       	pop	r13
     98e:	cf 90       	pop	r12
     990:	bf 90       	pop	r11
     992:	af 90       	pop	r10
     994:	9f 90       	pop	r9
     996:	8f 90       	pop	r8
     998:	7f 90       	pop	r7
     99a:	6f 90       	pop	r6
     99c:	5f 90       	pop	r5
     99e:	4f 90       	pop	r4
     9a0:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
     9a2:	91 2c       	mov	r9, r1
     9a4:	9e 01       	movw	r18, r28
     9a6:	2f 5f       	subi	r18, 0xFF	; 255
     9a8:	3f 4f       	sbci	r19, 0xFF	; 255
     9aa:	59 01       	movw	r10, r18
     9ac:	8f cf       	rjmp	.-226    	; 0x8cc <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
     9ae:	90 e3       	ldi	r25, 0x30	; 48
     9b0:	b2 cf       	rjmp	.-156    	; 0x916 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
     9b2:	f0 94       	com	r15
     9b4:	e0 94       	com	r14
     9b6:	d0 94       	com	r13
     9b8:	c0 94       	com	r12
     9ba:	c1 1c       	adc	r12, r1
     9bc:	d1 1c       	adc	r13, r1
     9be:	e1 1c       	adc	r14, r1
     9c0:	f1 1c       	adc	r15, r1
     9c2:	52 cf       	rjmp	.-348    	; 0x868 <lcd_int32+0x54>

000009c4 <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
     9c4:	5f 92       	push	r5
     9c6:	6f 92       	push	r6
     9c8:	7f 92       	push	r7
     9ca:	8f 92       	push	r8
     9cc:	9f 92       	push	r9
     9ce:	af 92       	push	r10
     9d0:	bf 92       	push	r11
     9d2:	cf 92       	push	r12
     9d4:	df 92       	push	r13
     9d6:	ef 92       	push	r14
     9d8:	ff 92       	push	r15
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
     9e6:	61 97       	sbiw	r28, 0x11	; 17
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	5c 01       	movw	r10, r24
     9f4:	96 2e       	mov	r9, r22
     9f6:	54 2e       	mov	r5, r20
     9f8:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
     9fa:	8b 2c       	mov	r8, r11
     9fc:	88 1c       	adc	r8, r8
     9fe:	88 24       	eor	r8, r8
     a00:	88 1c       	adc	r8, r8
     a02:	78 2c       	mov	r7, r8
     a04:	9c 01       	movw	r18, r24
     a06:	97 fd       	sbrc	r25, 7
     a08:	9f c0       	rjmp	.+318    	; 0xb48 <lcd_int16+0x184>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
     a0a:	55 20       	and	r5, r5
     a0c:	09 f4       	brne	.+2      	; 0xa10 <lcd_int16+0x4c>
     a0e:	90 c0       	rjmp	.+288    	; 0xb30 <lcd_int16+0x16c>
     a10:	8e 01       	movw	r16, r28
     a12:	0f 5f       	subi	r16, 0xFF	; 255
     a14:	1f 4f       	sbci	r17, 0xFF	; 255
     a16:	78 01       	movw	r14, r16
     a18:	cc 24       	eor	r12, r12
     a1a:	ca 94       	dec	r12
     a1c:	c5 0c       	add	r12, r5
     a1e:	d1 2c       	mov	r13, r1
     a20:	8f ef       	ldi	r24, 0xFF	; 255
     a22:	c8 1a       	sub	r12, r24
     a24:	d8 0a       	sbc	r13, r24
     a26:	c0 0e       	add	r12, r16
     a28:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
     a2a:	6a e0       	ldi	r22, 0x0A	; 10
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	c9 01       	movw	r24, r18
     a30:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__divmodhi4>
     a34:	46 2f       	mov	r20, r22
     a36:	24 2f       	mov	r18, r20
     a38:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
     a3a:	80 5d       	subi	r24, 0xD0	; 208
     a3c:	f7 01       	movw	r30, r14
     a3e:	81 93       	st	Z+, r24
     a40:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
     a42:	ec 15       	cp	r30, r12
     a44:	fd 05       	cpc	r31, r13
     a46:	89 f7       	brne	.-30     	; 0xa2a <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
     a48:	ff 24       	eor	r15, r15
     a4a:	f3 94       	inc	r15
     a4c:	f5 0c       	add	r15, r5
     a4e:	f8 01       	movw	r30, r16
     a50:	e5 0d       	add	r30, r5
     a52:	f1 1d       	adc	r31, r1
     a54:	8e e2       	ldi	r24, 0x2E	; 46
     a56:	80 83       	st	Z, r24
     a58:	01 c0       	rjmp	.+2      	; 0xa5c <lcd_int16+0x98>

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
     a5a:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
     a5c:	6a e0       	ldi	r22, 0x0A	; 10
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	c9 01       	movw	r24, r18
     a62:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__divmodhi4>
     a66:	46 2f       	mov	r20, r22
     a68:	24 2f       	mov	r18, r20
     a6a:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	9f 0d       	add	r25, r15
     a70:	f8 01       	movw	r30, r16
     a72:	ef 0d       	add	r30, r15
     a74:	f1 1d       	adc	r31, r1
     a76:	80 5d       	subi	r24, 0xD0	; 208
     a78:	80 83       	st	Z, r24
        }
        while(qr.quot);
     a7a:	21 15       	cp	r18, r1
     a7c:	31 05       	cpc	r19, r1
     a7e:	69 f7       	brne	.-38     	; 0xa5a <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
     a80:	61 10       	cpse	r6, r1
     a82:	5b c0       	rjmp	.+182    	; 0xb3a <lcd_int16+0x176>
     a84:	b7 fc       	sbrc	r11, 7
     a86:	65 c0       	rjmp	.+202    	; 0xb52 <lcd_int16+0x18e>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
     a88:	99 20       	and	r9, r9
     a8a:	b1 f0       	breq	.+44     	; 0xab8 <lcd_int16+0xf4>
     a8c:	68 2d       	mov	r22, r8
     a8e:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
     a90:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
     a92:	29 2f       	mov	r18, r25
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	49 2d       	mov	r20, r9
     a98:	50 e0       	ldi	r21, 0x00	; 0
     a9a:	46 1b       	sub	r20, r22
     a9c:	57 0b       	sbc	r21, r23
     a9e:	24 17       	cp	r18, r20
     aa0:	35 07       	cpc	r19, r21
     aa2:	54 f4       	brge	.+20     	; 0xab8 <lcd_int16+0xf4>
     aa4:	9f 5f       	subi	r25, 0xFF	; 255
     aa6:	f8 01       	movw	r30, r16
     aa8:	e2 0f       	add	r30, r18
     aaa:	f3 1f       	adc	r31, r19
     aac:	80 83       	st	Z, r24
     aae:	29 2f       	mov	r18, r25
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	24 17       	cp	r18, r20
     ab4:	35 07       	cpc	r19, r21
     ab6:	b4 f3       	brlt	.-20     	; 0xaa4 <lcd_int16+0xe0>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
     ab8:	77 20       	and	r7, r7
     aba:	31 f0       	breq	.+12     	; 0xac8 <lcd_int16+0x104>
     abc:	f8 01       	movw	r30, r16
     abe:	e9 0f       	add	r30, r25
     ac0:	f1 1d       	adc	r31, r1
     ac2:	8d e2       	ldi	r24, 0x2D	; 45
     ac4:	80 83       	st	Z, r24
     ac6:	9f 5f       	subi	r25, 0xFF	; 255
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ac8:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
     aca:	91 50       	subi	r25, 0x01	; 1
     acc:	f8 01       	movw	r30, r16
     ace:	e9 0f       	add	r30, r25
     ad0:	f1 1d       	adc	r31, r1
     ad2:	80 81       	ld	r24, Z
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ad4:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ad6:	77 9b       	sbis	0x0e, 7	; 14
     ad8:	fe cf       	rjmp	.-4      	; 0xad6 <lcd_int16+0x112>
  SPDR = byte;                        //send payload
     ada:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     adc:	77 9b       	sbis	0x0e, 7	; 14
     ade:	fe cf       	rjmp	.-4      	; 0xadc <lcd_int16+0x118>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ae0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ae4:	88 60       	ori	r24, 0x08	; 8
     ae6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     aea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     aee:	87 7f       	andi	r24, 0xF7	; 247
     af0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     af4:	ef e9       	ldi	r30, 0x9F	; 159
     af6:	ff e0       	ldi	r31, 0x0F	; 15
     af8:	31 97       	sbiw	r30, 0x01	; 1
     afa:	f1 f7       	brne	.-4      	; 0xaf8 <lcd_int16+0x134>
     afc:	00 c0       	rjmp	.+0      	; 0xafe <lcd_int16+0x13a>
     afe:	00 00       	nop

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
     b00:	91 11       	cpse	r25, r1
     b02:	e3 cf       	rjmp	.-58     	; 0xaca <lcd_int16+0x106>
}
     b04:	61 96       	adiw	r28, 0x11	; 17
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	f8 94       	cli
     b0a:	de bf       	out	0x3e, r29	; 62
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	cd bf       	out	0x3d, r28	; 61
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	df 90       	pop	r13
     b1e:	cf 90       	pop	r12
     b20:	bf 90       	pop	r11
     b22:	af 90       	pop	r10
     b24:	9f 90       	pop	r9
     b26:	8f 90       	pop	r8
     b28:	7f 90       	pop	r7
     b2a:	6f 90       	pop	r6
     b2c:	5f 90       	pop	r5
     b2e:	08 95       	ret
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
     b30:	f1 2c       	mov	r15, r1
     b32:	8e 01       	movw	r16, r28
     b34:	0f 5f       	subi	r16, 0xFF	; 255
     b36:	1f 4f       	sbci	r17, 0xFF	; 255
     b38:	91 cf       	rjmp	.-222    	; 0xa5c <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
     b3a:	99 20       	and	r9, r9
     b3c:	09 f4       	brne	.+2      	; 0xb40 <lcd_int16+0x17c>
     b3e:	bc cf       	rjmp	.-136    	; 0xab8 <lcd_int16+0xf4>
     b40:	68 2d       	mov	r22, r8
     b42:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
     b44:	80 e3       	ldi	r24, 0x30	; 48
     b46:	a5 cf       	rjmp	.-182    	; 0xa92 <lcd_int16+0xce>
     b48:	22 27       	eor	r18, r18
     b4a:	33 27       	eor	r19, r19
     b4c:	28 1b       	sub	r18, r24
     b4e:	39 0b       	sbc	r19, r25
     b50:	5c cf       	rjmp	.-328    	; 0xa0a <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
     b52:	f3 94       	inc	r15
     b54:	f3 94       	inc	r15
     b56:	f8 01       	movw	r30, r16
     b58:	e9 0f       	add	r30, r25
     b5a:	f1 1d       	adc	r31, r1
     b5c:	8d e2       	ldi	r24, 0x2D	; 45
     b5e:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
     b60:	99 20       	and	r9, r9
     b62:	59 f0       	breq	.+22     	; 0xb7a <lcd_int16+0x1b6>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
     b64:	2f 2d       	mov	r18, r15
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	49 2d       	mov	r20, r9
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	24 17       	cp	r18, r20
     b6e:	35 07       	cpc	r19, r21
     b70:	24 f4       	brge	.+8      	; 0xb7a <lcd_int16+0x1b6>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
     b72:	9f 2d       	mov	r25, r15
                bSigned = 0;
     b74:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
     b76:	80 e2       	ldi	r24, 0x20	; 32
     b78:	95 cf       	rjmp	.-214    	; 0xaa4 <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
     b7a:	9f 2d       	mov	r25, r15
     b7c:	a5 cf       	rjmp	.-182    	; 0xac8 <lcd_int16+0x104>

00000b7e <lm73_temp_convert>:
      This is the flag that determines if the conversion is sent out
      as Farenheit or Celcius. 0x00=Celcius and 0x01=Farenheit
Return: VOID 
***********************************************************/
void lm73_temp_convert(char temp_digits[], uint16_t lm73_temp, uint8_t f_not_c)
{
     b7e:	cf 92       	push	r12
     b80:	df 92       	push	r13
     b82:	ef 92       	push	r14
     b84:	ff 92       	push	r15
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	a0 97       	sbiw	r28, 0x20	; 32
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	de bf       	out	0x3e, r29	; 62
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	cd bf       	out	0x3d, r28	; 61
     b9e:	8c 01       	movw	r16, r24
     ba0:	f4 2e       	mov	r15, r20
  //clear the character array
  temp_digits[0]=0;//set initial value to zero to denote empty array
     ba2:	dc 01       	movw	r26, r24
     ba4:	1c 92       	st	X, r1

  //clean the register value
  uint16_t cleaned_temp   = (lm73_temp>>5);//copy RS value by 5 to get rid of 0:4
     ba6:	76 95       	lsr	r23
     ba8:	67 95       	ror	r22
     baa:	72 95       	swap	r23
     bac:	62 95       	swap	r22
     bae:	6f 70       	andi	r22, 0x0F	; 15
     bb0:	67 27       	eor	r22, r23
     bb2:	7f 70       	andi	r23, 0x0F	; 15
     bb4:	67 27       	eor	r22, r23
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0

  //setup variables to store additions
  uint8_t integer_part    = 0;//whole number
  uint8_t fractional_part = 0;//decimal part
     bbc:	e1 2c       	mov	r14, r1

  //clean the register value
  uint16_t cleaned_temp   = (lm73_temp>>5);//copy RS value by 5 to get rid of 0:4

  //setup variables to store additions
  uint8_t integer_part    = 0;//whole number
     bbe:	e0 e0       	ldi	r30, 0x00	; 0
      }else if (bit_t==1) {//0.50 degrees
        fractional_part+=50;
      }else if (bit_t==10) {//sign of temperature
        strcat(temp_digits, "-");
      }else{
        integer_part+=(1<<(bit_t-2));//bits 2:9(-2 due to 1st two bits)
     bc0:	a1 e0       	ldi	r26, 0x01	; 1
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	03 c0       	rjmp	.+6      	; 0xbcc <lm73_temp_convert+0x4e>
     bc6:	2f 5f       	subi	r18, 0xFF	; 255
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	9f 5f       	subi	r25, 0xFF	; 255
  //integer used to keep track of farenheit decimal
  uint8_t farenheit_carry = 0;

  //check each bit to get temperature
  for (uint8_t bit_t = 0; bit_t <11; bit_t++) {
    if (((cleaned_temp>>bit_t)&1)==1) {//bit is a one
     bcc:	ab 01       	movw	r20, r22
     bce:	02 2e       	mov	r0, r18
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <lm73_temp_convert+0x58>
     bd2:	56 95       	lsr	r21
     bd4:	47 95       	ror	r20
     bd6:	0a 94       	dec	r0
     bd8:	e2 f7       	brpl	.-8      	; 0xbd2 <lm73_temp_convert+0x54>
     bda:	40 ff       	sbrs	r20, 0
     bdc:	13 c0       	rjmp	.+38     	; 0xc04 <lm73_temp_convert+0x86>
      if (bit_t == 0) {//0.25 degrees
     bde:	22 23       	and	r18, r18
     be0:	09 f4       	brne	.+2      	; 0xbe4 <lm73_temp_convert+0x66>
     be2:	d3 c0       	rjmp	.+422    	; 0xd8a <lm73_temp_convert+0x20c>
        fractional_part+=25;
      }else if (bit_t==1) {//0.50 degrees
     be4:	21 30       	cpi	r18, 0x01	; 1
     be6:	09 f4       	brne	.+2      	; 0xbea <lm73_temp_convert+0x6c>
     be8:	d3 c0       	rjmp	.+422    	; 0xd90 <lm73_temp_convert+0x212>
        fractional_part+=50;
      }else if (bit_t==10) {//sign of temperature
     bea:	2a 30       	cpi	r18, 0x0A	; 10
     bec:	09 f4       	brne	.+2      	; 0xbf0 <lm73_temp_convert+0x72>
     bee:	d4 c0       	rjmp	.+424    	; 0xd98 <lm73_temp_convert+0x21a>
        strcat(temp_digits, "-");
      }else{
        integer_part+=(1<<(bit_t-2));//bits 2:9(-2 due to 1st two bits)
     bf0:	a9 01       	movw	r20, r18
     bf2:	42 50       	subi	r20, 0x02	; 2
     bf4:	51 09       	sbc	r21, r1
     bf6:	6d 01       	movw	r12, r26
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <lm73_temp_convert+0x80>
     bfa:	cc 0c       	add	r12, r12
     bfc:	dd 1c       	adc	r13, r13
     bfe:	4a 95       	dec	r20
     c00:	e2 f7       	brpl	.-8      	; 0xbfa <lm73_temp_convert+0x7c>
     c02:	ec 0d       	add	r30, r12

  //integer used to keep track of farenheit decimal
  uint8_t farenheit_carry = 0;

  //check each bit to get temperature
  for (uint8_t bit_t = 0; bit_t <11; bit_t++) {
     c04:	9b 30       	cpi	r25, 0x0B	; 11
     c06:	f9 f6       	brne	.-66     	; 0xbc6 <lm73_temp_convert+0x48>
        integer_part+=(1<<(bit_t-2));//bits 2:9(-2 due to 1st two bits)
      }
    }
  }
  //Farenheit conversion
  if (f_not_c==1) {
     c08:	dd 24       	eor	r13, r13
     c0a:	d3 94       	inc	r13
     c0c:	fd 14       	cp	r15, r13
     c0e:	09 f4       	brne	.+2      	; 0xc12 <lm73_temp_convert+0x94>
     c10:	42 c0       	rjmp	.+132    	; 0xc96 <lm73_temp_convert+0x118>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     c12:	4a e0       	ldi	r20, 0x0A	; 10
     c14:	be 01       	movw	r22, r28
     c16:	6f 5e       	subi	r22, 0xEF	; 239
     c18:	7f 4f       	sbci	r23, 0xFF	; 255
     c1a:	8e 2f       	mov	r24, r30
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__itoa_ncheck>
     c22:	4a e0       	ldi	r20, 0x0A	; 10
     c24:	be 01       	movw	r22, r28
     c26:	6f 5f       	subi	r22, 0xFF	; 255
     c28:	7f 4f       	sbci	r23, 0xFF	; 255
     c2a:	8e 2d       	mov	r24, r14
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__itoa_ncheck>
  }

  //write value to char array
  itoa(integer_part,ip_arr,10);//convert integer part to ascii
  itoa(fractional_part,fp_arr,10);//convert fractionla part to ascii
  strcat(temp_digits, ip_arr);//concatenate with the main array
     c32:	be 01       	movw	r22, r28
     c34:	6f 5e       	subi	r22, 0xEF	; 239
     c36:	7f 4f       	sbci	r23, 0xFF	; 255
     c38:	c8 01       	movw	r24, r16
     c3a:	0e 94 51 08 	call	0x10a2	; 0x10a2 <strcat>
  strcat(temp_digits, ".");//add decimal point
     c3e:	f8 01       	movw	r30, r16
     c40:	01 90       	ld	r0, Z+
     c42:	00 20       	and	r0, r0
     c44:	e9 f7       	brne	.-6      	; 0xc40 <lm73_temp_convert+0xc2>
     c46:	31 97       	sbiw	r30, 0x01	; 1
     c48:	cf 01       	movw	r24, r30
     c4a:	80 1b       	sub	r24, r16
     c4c:	91 0b       	sbc	r25, r17
     c4e:	2e e2       	ldi	r18, 0x2E	; 46
     c50:	20 83       	st	Z, r18
  strcat(temp_digits, fp_arr);//concatenate with main array
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	be 01       	movw	r22, r28
     c56:	6f 5f       	subi	r22, 0xFF	; 255
     c58:	7f 4f       	sbci	r23, 0xFF	; 255
     c5a:	80 0f       	add	r24, r16
     c5c:	91 1f       	adc	r25, r17
     c5e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <strcpy>
  if (f_not_c) {
     c62:	f1 10       	cpse	r15, r1
     c64:	84 c0       	rjmp	.+264    	; 0xd6e <lm73_temp_convert+0x1f0>
    strcat(temp_digits,"F");//Add DEG F
  }else{
    strcat(temp_digits, "C");//ADD DEG C
     c66:	f8 01       	movw	r30, r16
     c68:	01 90       	ld	r0, Z+
     c6a:	00 20       	and	r0, r0
     c6c:	e9 f7       	brne	.-6      	; 0xc68 <lm73_temp_convert+0xea>
     c6e:	31 97       	sbiw	r30, 0x01	; 1
     c70:	83 e4       	ldi	r24, 0x43	; 67
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	91 83       	std	Z+1, r25	; 0x01
     c76:	80 83       	st	Z, r24
  }


}//lm73_temp_convert
     c78:	a0 96       	adiw	r28, 0x20	; 32
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	cd bf       	out	0x3d, r28	; 61
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	ff 90       	pop	r15
     c8e:	ef 90       	pop	r14
     c90:	df 90       	pop	r13
     c92:	cf 90       	pop	r12
     c94:	08 95       	ret
    }
  }
  //Farenheit conversion
  if (f_not_c==1) {
    //Convert decimal part 1st exclusively
    uint8_t farenheit_decimal = (fractional_part*9)/5;
     c96:	29 e0       	ldi	r18, 0x09	; 9
     c98:	e2 9e       	mul	r14, r18
     c9a:	c0 01       	movw	r24, r0
     c9c:	11 24       	eor	r1, r1
     c9e:	65 e0       	ldi	r22, 0x05	; 5
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__divmodhi4>
     ca6:	46 2f       	mov	r20, r22
    if (farenheit_decimal >=100) {
     ca8:	64 36       	cpi	r22, 0x64	; 100
     caa:	08 f0       	brcs	.+2      	; 0xcae <lm73_temp_convert+0x130>
     cac:	6a c0       	rjmp	.+212    	; 0xd82 <lm73_temp_convert+0x204>
  //setup arrays to hold string equivalent of IP(integer part) and FP(fractional part)
  char ip_arr[16];
  char fp_arr[16];

  //integer used to keep track of farenheit decimal
  uint8_t farenheit_carry = 0;
     cae:	f0 e0       	ldi	r31, 0x00	; 0
    // clear_display();//for testing
    // cursor_home();//for testing
    //Convert integer part
    uint16_t farenheit_integer  = (integer_part*90)/5 + 320;
    uint8_t f_decimal_from_int = (farenheit_integer%10) * 10;
    fractional_part +=f_decimal_from_int;//update fraction part
     cb0:	82 e1       	ldi	r24, 0x12	; 18
     cb2:	e8 9f       	mul	r30, r24
     cb4:	70 01       	movw	r14, r0
     cb6:	11 24       	eor	r1, r1
     cb8:	a0 ec       	ldi	r26, 0xC0	; 192
     cba:	ea 1a       	sub	r14, r26
     cbc:	ae ef       	ldi	r26, 0xFE	; 254
     cbe:	fa 0a       	sbc	r15, r26
     cc0:	97 01       	movw	r18, r14
     cc2:	ad ec       	ldi	r26, 0xCD	; 205
     cc4:	bc ec       	ldi	r27, 0xCC	; 204
     cc6:	0e 94 0c 08 	call	0x1018	; 0x1018 <__umulhisi3>
     cca:	96 95       	lsr	r25
     ccc:	87 95       	ror	r24
     cce:	96 95       	lsr	r25
     cd0:	87 95       	ror	r24
     cd2:	96 95       	lsr	r25
     cd4:	87 95       	ror	r24
     cd6:	9c 01       	movw	r18, r24
     cd8:	22 0f       	add	r18, r18
     cda:	33 1f       	adc	r19, r19
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	82 0f       	add	r24, r18
     cea:	93 1f       	adc	r25, r19
     cec:	e8 1a       	sub	r14, r24
     cee:	f9 0a       	sbc	r15, r25
     cf0:	f4 2e       	mov	r15, r20
     cf2:	ba e0       	ldi	r27, 0x0A	; 10
     cf4:	eb 9e       	mul	r14, r27
     cf6:	f0 0c       	add	r15, r0
     cf8:	11 24       	eor	r1, r1
    if (fractional_part>=100) {
     cfa:	73 e6       	ldi	r23, 0x63	; 99
     cfc:	c7 2e       	mov	r12, r23
     cfe:	cf 14       	cp	r12, r15
     d00:	20 f4       	brcc	.+8      	; 0xd0a <lm73_temp_convert+0x18c>
      farenheit_carry++;//increase the farenheit carry
     d02:	ff 5f       	subi	r31, 0xFF	; 255
      fractional_part-=100;//update fractional part
     d04:	8c e9       	ldi	r24, 0x9C	; 156
     d06:	d8 2e       	mov	r13, r24
     d08:	fd 0c       	add	r15, r13
     d0a:	29 e0       	ldi	r18, 0x09	; 9
     d0c:	e2 9f       	mul	r30, r18
     d0e:	c0 01       	movw	r24, r0
     d10:	11 24       	eor	r1, r1
     d12:	65 e0       	ldi	r22, 0x05	; 5
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__divmodhi4>
     d1a:	80 e2       	ldi	r24, 0x20	; 32
     d1c:	86 0f       	add	r24, r22
     d1e:	8f 0f       	add	r24, r31
     d20:	4a e0       	ldi	r20, 0x0A	; 10
     d22:	be 01       	movw	r22, r28
     d24:	6f 5e       	subi	r22, 0xEF	; 239
     d26:	7f 4f       	sbci	r23, 0xFF	; 255
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__itoa_ncheck>
     d2e:	4a e0       	ldi	r20, 0x0A	; 10
     d30:	be 01       	movw	r22, r28
     d32:	6f 5f       	subi	r22, 0xFF	; 255
     d34:	7f 4f       	sbci	r23, 0xFF	; 255
     d36:	8f 2d       	mov	r24, r15
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__itoa_ncheck>
  }

  //write value to char array
  itoa(integer_part,ip_arr,10);//convert integer part to ascii
  itoa(fractional_part,fp_arr,10);//convert fractionla part to ascii
  strcat(temp_digits, ip_arr);//concatenate with the main array
     d3e:	be 01       	movw	r22, r28
     d40:	6f 5e       	subi	r22, 0xEF	; 239
     d42:	7f 4f       	sbci	r23, 0xFF	; 255
     d44:	c8 01       	movw	r24, r16
     d46:	0e 94 51 08 	call	0x10a2	; 0x10a2 <strcat>
  strcat(temp_digits, ".");//add decimal point
     d4a:	f8 01       	movw	r30, r16
     d4c:	01 90       	ld	r0, Z+
     d4e:	00 20       	and	r0, r0
     d50:	e9 f7       	brne	.-6      	; 0xd4c <lm73_temp_convert+0x1ce>
     d52:	31 97       	sbiw	r30, 0x01	; 1
     d54:	cf 01       	movw	r24, r30
     d56:	80 1b       	sub	r24, r16
     d58:	91 0b       	sbc	r25, r17
     d5a:	2e e2       	ldi	r18, 0x2E	; 46
     d5c:	20 83       	st	Z, r18
  strcat(temp_digits, fp_arr);//concatenate with main array
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	be 01       	movw	r22, r28
     d62:	6f 5f       	subi	r22, 0xFF	; 255
     d64:	7f 4f       	sbci	r23, 0xFF	; 255
     d66:	80 0f       	add	r24, r16
     d68:	91 1f       	adc	r25, r17
     d6a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <strcpy>
  if (f_not_c) {
    strcat(temp_digits,"F");//Add DEG F
     d6e:	f8 01       	movw	r30, r16
     d70:	01 90       	ld	r0, Z+
     d72:	00 20       	and	r0, r0
     d74:	e9 f7       	brne	.-6      	; 0xd70 <lm73_temp_convert+0x1f2>
     d76:	31 97       	sbiw	r30, 0x01	; 1
     d78:	86 e4       	ldi	r24, 0x46	; 70
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	91 83       	std	Z+1, r25	; 0x01
     d7e:	80 83       	st	Z, r24
     d80:	7b cf       	rjmp	.-266    	; 0xc78 <lm73_temp_convert+0xfa>
  if (f_not_c==1) {
    //Convert decimal part 1st exclusively
    uint8_t farenheit_decimal = (fractional_part*9)/5;
    if (farenheit_decimal >=100) {
      farenheit_carry++;
      fractional_part = farenheit_decimal-100;
     d82:	4c e9       	ldi	r20, 0x9C	; 156
     d84:	46 0f       	add	r20, r22
  //Farenheit conversion
  if (f_not_c==1) {
    //Convert decimal part 1st exclusively
    uint8_t farenheit_decimal = (fractional_part*9)/5;
    if (farenheit_decimal >=100) {
      farenheit_carry++;
     d86:	f1 e0       	ldi	r31, 0x01	; 1
     d88:	93 cf       	rjmp	.-218    	; 0xcb0 <lm73_temp_convert+0x132>

  //check each bit to get temperature
  for (uint8_t bit_t = 0; bit_t <11; bit_t++) {
    if (((cleaned_temp>>bit_t)&1)==1) {//bit is a one
      if (bit_t == 0) {//0.25 degrees
        fractional_part+=25;
     d8a:	f9 e1       	ldi	r31, 0x19	; 25
     d8c:	ef 0e       	add	r14, r31
     d8e:	1b cf       	rjmp	.-458    	; 0xbc6 <lm73_temp_convert+0x48>
      }else if (bit_t==1) {//0.50 degrees
        fractional_part+=50;
     d90:	f2 e3       	ldi	r31, 0x32	; 50
     d92:	cf 2e       	mov	r12, r31
     d94:	ec 0c       	add	r14, r12
     d96:	17 cf       	rjmp	.-466    	; 0xbc6 <lm73_temp_convert+0x48>
      }else if (bit_t==10) {//sign of temperature
        strcat(temp_digits, "-");
     d98:	8d e2       	ldi	r24, 0x2D	; 45
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	d8 01       	movw	r26, r16
     d9e:	8d 93       	st	X+, r24
     da0:	9c 93       	st	X, r25
     da2:	32 cf       	rjmp	.-412    	; 0xc08 <lm73_temp_convert+0x8a>

00000da4 <read_temperature>:
    This variable holds the temperature value that was read
    from the LM73 temperature sensor
***********************************************************/
uint16_t read_temperature(){
  uint16_t lm73_temperature;//var to hold retun value
  twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2);
     da4:	42 e0       	ldi	r20, 0x02	; 2
     da6:	6e e5       	ldi	r22, 0x5E	; 94
     da8:	71 e0       	ldi	r23, 0x01	; 1
     daa:	80 e9       	ldi	r24, 0x90	; 144
     dac:	0e 94 84 07 	call	0xf08	; 0xf08 <twi_start_rd>
  lm73_temperature = lm73_rd_buf[0];//
  lm73_temperature = lm73_temperature<<8;//LS by 8
  lm73_temperature |= lm73_rd_buf[1];

  return lm73_temperature;
     db0:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <lm73_rd_buf>
     db4:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <lm73_rd_buf+0x1>
}
     db8:	98 27       	eor	r25, r24
     dba:	89 27       	eor	r24, r25
     dbc:	98 27       	eor	r25, r24
     dbe:	08 95       	ret

00000dc0 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
     dc0:	1f 92       	push	r1
     dc2:	0f 92       	push	r0
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	0f 92       	push	r0
     dc8:	11 24       	eor	r1, r1
     dca:	0b b6       	in	r0, 0x3b	; 59
     dcc:	0f 92       	push	r0
     dce:	2f 93       	push	r18
     dd0:	3f 93       	push	r19
     dd2:	8f 93       	push	r24
     dd4:	9f 93       	push	r25
     dd6:	af 93       	push	r26
     dd8:	bf 93       	push	r27
     dda:	ef 93       	push	r30
     ddc:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
     dde:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     de2:	8e 2f       	mov	r24, r30
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	fc 01       	movw	r30, r24
     de8:	38 97       	sbiw	r30, 0x08	; 8
     dea:	e1 35       	cpi	r30, 0x51	; 81
     dec:	f1 05       	cpc	r31, r1
     dee:	b0 f0       	brcs	.+44     	; 0xe1c <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
     df0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     df4:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <twi_state>
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
     df8:	84 e0       	ldi	r24, 0x04	; 4
     dfa:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  }//switch
}//TWI_isr
     dfe:	ff 91       	pop	r31
     e00:	ef 91       	pop	r30
     e02:	bf 91       	pop	r27
     e04:	af 91       	pop	r26
     e06:	9f 91       	pop	r25
     e08:	8f 91       	pop	r24
     e0a:	3f 91       	pop	r19
     e0c:	2f 91       	pop	r18
     e0e:	0f 90       	pop	r0
     e10:	0b be       	out	0x3b, r0	; 59
     e12:	0f 90       	pop	r0
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	0f 90       	pop	r0
     e18:	1f 90       	pop	r1
     e1a:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
     e1c:	ea 5b       	subi	r30, 0xBA	; 186
     e1e:	ff 4f       	sbci	r31, 0xFF	; 255
     e20:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
     e24:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <twi_buf_ptr.1780>
     e28:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <twi_buf>
     e2c:	f0 91 62 01 	lds	r31, 0x0162	; 0x800162 <twi_buf+0x1>
     e30:	e8 0f       	add	r30, r24
     e32:	f1 1d       	adc	r31, r1
     e34:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     e38:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
     e3a:	84 e9       	ldi	r24, 0x94	; 148
     e3c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;      
     e40:	de cf       	rjmp	.-68     	; 0xdfe <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
     e42:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <twi_bus_addr>
     e46:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
      twi_buf_ptr = 0;      //initalize buffer pointer 
     e4a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <twi_buf_ptr.1780>
      TWCR = TWCR_SEND;     //send SLA+RW
     e4e:	85 e8       	ldi	r24, 0x85	; 133
     e50:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
     e54:	d4 cf       	rjmp	.-88     	; 0xdfe <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
     e56:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <twi_buf_ptr.1780>
     e5a:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <twi_msg_size>
     e5e:	89 17       	cp	r24, r25
     e60:	60 f7       	brcc	.-40     	; 0xe3a <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
     e62:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <twi_buf>
     e66:	f0 91 62 01 	lds	r31, 0x0162	; 0x800162 <twi_buf+0x1>
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	98 0f       	add	r25, r24
     e6e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <twi_buf_ptr.1780>
     e72:	e8 0f       	add	r30, r24
     e74:	f1 1d       	adc	r31, r1
     e76:	80 81       	ld	r24, Z
     e78:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
        TWCR = TWCR_SEND;               //send next byte 
     e7c:	85 e8       	ldi	r24, 0x85	; 133
     e7e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     e82:	bd cf       	rjmp	.-134    	; 0xdfe <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
     e84:	85 ea       	ldi	r24, 0xA5	; 165
     e86:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
     e8a:	b9 cf       	rjmp	.-142    	; 0xdfe <__vector_33+0x3e>
     e8c:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <twi_buf_ptr.1780>
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
     e90:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <twi_msg_size>
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	28 17       	cp	r18, r24
     e9c:	39 07       	cpc	r19, r25
     e9e:	dc f4       	brge	.+54     	; 0xed6 <__vector_33+0x116>
     ea0:	85 ec       	ldi	r24, 0xC5	; 197
     ea2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     ea6:	ab cf       	rjmp	.-170    	; 0xdfe <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
     ea8:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <twi_buf>
     eac:	f0 91 62 01 	lds	r31, 0x0162	; 0x800162 <twi_buf+0x1>
     eb0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <twi_buf_ptr.1780>
     eb4:	21 e0       	ldi	r18, 0x01	; 1
     eb6:	28 0f       	add	r18, r24
     eb8:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <twi_buf_ptr.1780>
     ebc:	e8 0f       	add	r30, r24
     ebe:	f1 1d       	adc	r31, r1
     ec0:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     ec4:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
     ec6:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <twi_msg_size>
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	28 17       	cp	r18, r24
     ed2:	39 07       	cpc	r19, r25
     ed4:	2c f3       	brlt	.-54     	; 0xea0 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
     ed6:	85 e8       	ldi	r24, 0x85	; 133
     ed8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     edc:	90 cf       	rjmp	.-224    	; 0xdfe <__vector_33+0x3e>

00000ede <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     ede:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
}
     ee2:	81 70       	andi	r24, 0x01	; 1
     ee4:	08 95       	ret

00000ee6 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     ee6:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
     eea:	90 fd       	sbrc	r25, 0
     eec:	fc cf       	rjmp	.-8      	; 0xee6 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
     eee:	8e 7f       	andi	r24, 0xFE	; 254
     ef0:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <twi_bus_addr>
  twi_buf = twi_data;                   //load pointer to write buffer
     ef4:	70 93 62 01 	sts	0x0162, r23	; 0x800162 <twi_buf+0x1>
     ef8:	60 93 61 01 	sts	0x0161, r22	; 0x800161 <twi_buf>
  twi_msg_size = byte_cnt;              //load size of xfer 
     efc:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <twi_msg_size>
  TWCR = TWCR_START;                    //initiate START
     f00:	85 ea       	ldi	r24, 0xA5	; 165
     f02:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     f06:	08 95       	ret

00000f08 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     f08:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
     f0c:	90 fd       	sbrc	r25, 0
     f0e:	fc cf       	rjmp	.-8      	; 0xf08 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
     f10:	81 60       	ori	r24, 0x01	; 1
     f12:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <twi_bus_addr>
  twi_buf = twi_data;                  //load pointer to write buffer
     f16:	70 93 62 01 	sts	0x0162, r23	; 0x800162 <twi_buf+0x1>
     f1a:	60 93 61 01 	sts	0x0161, r22	; 0x800161 <twi_buf>
  twi_msg_size = byte_cnt;             //load size of xfer 
     f1e:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <twi_msg_size>
  TWCR = TWCR_START;                   //initiate START
     f22:	85 ea       	ldi	r24, 0xA5	; 165
     f24:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     f28:	08 95       	ret

00000f2a <init_twi>:
     f2a:	8f ef       	ldi	r24, 0xFF	; 255
     f2c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     f30:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     f34:	8c e0       	ldi	r24, 0x0C	; 12
     f36:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     f3a:	08 95       	ret

00000f3c <main>:
//***********************************************************************
//                            spi_init
//**********************************************************************
void spi_init(){
  //PORTB ouput: ss(pb0), MOSI(pb2), sclk(pb1)
  DDRB  |= (1<<BIT0)|(1<<BIT1)|(1<<BIT2);
     f3c:	87 b3       	in	r24, 0x17	; 23
     f3e:	87 60       	ori	r24, 0x07	; 7
     f40:	87 bb       	out	0x17, r24	; 23
  SPCR   = (1<<SPE) | (1<<MSTR) ; //master mode, clk low on idle, leading edge sample
     f42:	80 e5       	ldi	r24, 0x50	; 80
     f44:	8d b9       	out	0x0d, r24	; 13
  SPSR   = (1<<SPI2X); //choose double speed operation
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	8e b9       	out	0x0e, r24	; 14
   display to work correctly
 Parameters: NONE
 Return:void
 ***************************************************************/
 void lcd_ports(){
   DDRF  |= 0x08;  //port F bit 3 is enable for LCD
     f4a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     f4e:	88 60       	ori	r24, 0x08	; 8
     f50:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
   PORTF &= 0xF7;  //port F bit 3 is initially low
     f54:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f58:	87 7f       	andi	r24, 0xF7	; 247
     f5a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
int main()
{
  uint16_t lm73_temp;
  spi_init();//initialize SPI protocol
  lcd_ports();//initialize LCD ports
  lcd_init();//initialize LCD protocols
     f5e:	0e 94 48 03 	call	0x690	; 0x690 <lcd_init>
  init_twi();//initialize twi
     f62:	0e 94 95 07 	call	0xf2a	; 0xf2a <init_twi>

  sei();
     f66:	78 94       	sei

  // lm73_wr_buf[0] = LM73_PTR_TEMP;
  // twi_start_wr(LM73_ADDRESS,lm73_wr_buf,1);
  // _delay_ms(2);//wait for xfer to finish
  clear_display();
     f68:	0e 94 9d 02 	call	0x53a	; 0x53a <clear_display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f6c:	2f ef       	ldi	r18, 0xFF	; 255
     f6e:	81 ee       	ldi	r24, 0xE1	; 225
     f70:	94 e0       	ldi	r25, 0x04	; 4
     f72:	21 50       	subi	r18, 0x01	; 1
     f74:	80 40       	sbci	r24, 0x00	; 0
     f76:	90 40       	sbci	r25, 0x00	; 0
     f78:	e1 f7       	brne	.-8      	; 0xf72 <main+0x36>
     f7a:	00 c0       	rjmp	.+0      	; 0xf7c <main+0x40>
     f7c:	00 00       	nop


  while (1) {
    _delay_ms(100);
    clear_display();
     f7e:	0e 94 9d 02 	call	0x53a	; 0x53a <clear_display>
    cursor_home();
     f82:	0e 94 b5 02 	call	0x56a	; 0x56a <cursor_home>
    lm73_temp = read_temperature();
     f86:	0e 94 d2 06 	call	0xda4	; 0xda4 <read_temperature>
    //lm73_temp = 0x860;//(-16.75C)for testing
    lm73_temp_convert(lcd_str_h,lm73_temp,0);//Farenheit EN
     f8a:	40 e0       	ldi	r20, 0x00	; 0
     f8c:	bc 01       	movw	r22, r24
     f8e:	8c e1       	ldi	r24, 0x1C	; 28
     f90:	91 e0       	ldi	r25, 0x01	; 1
     f92:	0e 94 bf 05 	call	0xb7e	; 0xb7e <lm73_temp_convert>
    string2lcd(lcd_str_h);
     f96:	8c e1       	ldi	r24, 0x1C	; 28
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	0e 94 19 03 	call	0x632	; 0x632 <string2lcd>
     f9e:	e6 cf       	rjmp	.-52     	; 0xf6c <main+0x30>

00000fa0 <__divmodhi4>:
     fa0:	97 fb       	bst	r25, 7
     fa2:	07 2e       	mov	r0, r23
     fa4:	16 f4       	brtc	.+4      	; 0xfaa <__divmodhi4+0xa>
     fa6:	00 94       	com	r0
     fa8:	07 d0       	rcall	.+14     	; 0xfb8 <__divmodhi4_neg1>
     faa:	77 fd       	sbrc	r23, 7
     fac:	09 d0       	rcall	.+18     	; 0xfc0 <__divmodhi4_neg2>
     fae:	0e 94 1b 08 	call	0x1036	; 0x1036 <__udivmodhi4>
     fb2:	07 fc       	sbrc	r0, 7
     fb4:	05 d0       	rcall	.+10     	; 0xfc0 <__divmodhi4_neg2>
     fb6:	3e f4       	brtc	.+14     	; 0xfc6 <__divmodhi4_exit>

00000fb8 <__divmodhi4_neg1>:
     fb8:	90 95       	com	r25
     fba:	81 95       	neg	r24
     fbc:	9f 4f       	sbci	r25, 0xFF	; 255
     fbe:	08 95       	ret

00000fc0 <__divmodhi4_neg2>:
     fc0:	70 95       	com	r23
     fc2:	61 95       	neg	r22
     fc4:	7f 4f       	sbci	r23, 0xFF	; 255

00000fc6 <__divmodhi4_exit>:
     fc6:	08 95       	ret

00000fc8 <__divmodsi4>:
     fc8:	05 2e       	mov	r0, r21
     fca:	97 fb       	bst	r25, 7
     fcc:	1e f4       	brtc	.+6      	; 0xfd4 <__divmodsi4+0xc>
     fce:	00 94       	com	r0
     fd0:	0e 94 fb 07 	call	0xff6	; 0xff6 <__negsi2>
     fd4:	57 fd       	sbrc	r21, 7
     fd6:	07 d0       	rcall	.+14     	; 0xfe6 <__divmodsi4_neg2>
     fd8:	0e 94 2f 08 	call	0x105e	; 0x105e <__udivmodsi4>
     fdc:	07 fc       	sbrc	r0, 7
     fde:	03 d0       	rcall	.+6      	; 0xfe6 <__divmodsi4_neg2>
     fe0:	4e f4       	brtc	.+18     	; 0xff4 <__divmodsi4_exit>
     fe2:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <__negsi2>

00000fe6 <__divmodsi4_neg2>:
     fe6:	50 95       	com	r21
     fe8:	40 95       	com	r20
     fea:	30 95       	com	r19
     fec:	21 95       	neg	r18
     fee:	3f 4f       	sbci	r19, 0xFF	; 255
     ff0:	4f 4f       	sbci	r20, 0xFF	; 255
     ff2:	5f 4f       	sbci	r21, 0xFF	; 255

00000ff4 <__divmodsi4_exit>:
     ff4:	08 95       	ret

00000ff6 <__negsi2>:
     ff6:	90 95       	com	r25
     ff8:	80 95       	com	r24
     ffa:	70 95       	com	r23
     ffc:	61 95       	neg	r22
     ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    1000:	8f 4f       	sbci	r24, 0xFF	; 255
    1002:	9f 4f       	sbci	r25, 0xFF	; 255
    1004:	08 95       	ret

00001006 <__tablejump2__>:
    1006:	ee 0f       	add	r30, r30
    1008:	ff 1f       	adc	r31, r31
    100a:	00 24       	eor	r0, r0
    100c:	00 1c       	adc	r0, r0
    100e:	0b be       	out	0x3b, r0	; 59
    1010:	07 90       	elpm	r0, Z+
    1012:	f6 91       	elpm	r31, Z
    1014:	e0 2d       	mov	r30, r0
    1016:	09 94       	ijmp

00001018 <__umulhisi3>:
    1018:	a2 9f       	mul	r26, r18
    101a:	b0 01       	movw	r22, r0
    101c:	b3 9f       	mul	r27, r19
    101e:	c0 01       	movw	r24, r0
    1020:	a3 9f       	mul	r26, r19
    1022:	70 0d       	add	r23, r0
    1024:	81 1d       	adc	r24, r1
    1026:	11 24       	eor	r1, r1
    1028:	91 1d       	adc	r25, r1
    102a:	b2 9f       	mul	r27, r18
    102c:	70 0d       	add	r23, r0
    102e:	81 1d       	adc	r24, r1
    1030:	11 24       	eor	r1, r1
    1032:	91 1d       	adc	r25, r1
    1034:	08 95       	ret

00001036 <__udivmodhi4>:
    1036:	aa 1b       	sub	r26, r26
    1038:	bb 1b       	sub	r27, r27
    103a:	51 e1       	ldi	r21, 0x11	; 17
    103c:	07 c0       	rjmp	.+14     	; 0x104c <__udivmodhi4_ep>

0000103e <__udivmodhi4_loop>:
    103e:	aa 1f       	adc	r26, r26
    1040:	bb 1f       	adc	r27, r27
    1042:	a6 17       	cp	r26, r22
    1044:	b7 07       	cpc	r27, r23
    1046:	10 f0       	brcs	.+4      	; 0x104c <__udivmodhi4_ep>
    1048:	a6 1b       	sub	r26, r22
    104a:	b7 0b       	sbc	r27, r23

0000104c <__udivmodhi4_ep>:
    104c:	88 1f       	adc	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	5a 95       	dec	r21
    1052:	a9 f7       	brne	.-22     	; 0x103e <__udivmodhi4_loop>
    1054:	80 95       	com	r24
    1056:	90 95       	com	r25
    1058:	bc 01       	movw	r22, r24
    105a:	cd 01       	movw	r24, r26
    105c:	08 95       	ret

0000105e <__udivmodsi4>:
    105e:	a1 e2       	ldi	r26, 0x21	; 33
    1060:	1a 2e       	mov	r1, r26
    1062:	aa 1b       	sub	r26, r26
    1064:	bb 1b       	sub	r27, r27
    1066:	fd 01       	movw	r30, r26
    1068:	0d c0       	rjmp	.+26     	; 0x1084 <__udivmodsi4_ep>

0000106a <__udivmodsi4_loop>:
    106a:	aa 1f       	adc	r26, r26
    106c:	bb 1f       	adc	r27, r27
    106e:	ee 1f       	adc	r30, r30
    1070:	ff 1f       	adc	r31, r31
    1072:	a2 17       	cp	r26, r18
    1074:	b3 07       	cpc	r27, r19
    1076:	e4 07       	cpc	r30, r20
    1078:	f5 07       	cpc	r31, r21
    107a:	20 f0       	brcs	.+8      	; 0x1084 <__udivmodsi4_ep>
    107c:	a2 1b       	sub	r26, r18
    107e:	b3 0b       	sbc	r27, r19
    1080:	e4 0b       	sbc	r30, r20
    1082:	f5 0b       	sbc	r31, r21

00001084 <__udivmodsi4_ep>:
    1084:	66 1f       	adc	r22, r22
    1086:	77 1f       	adc	r23, r23
    1088:	88 1f       	adc	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	1a 94       	dec	r1
    108e:	69 f7       	brne	.-38     	; 0x106a <__udivmodsi4_loop>
    1090:	60 95       	com	r22
    1092:	70 95       	com	r23
    1094:	80 95       	com	r24
    1096:	90 95       	com	r25
    1098:	9b 01       	movw	r18, r22
    109a:	ac 01       	movw	r20, r24
    109c:	bd 01       	movw	r22, r26
    109e:	cf 01       	movw	r24, r30
    10a0:	08 95       	ret

000010a2 <strcat>:
    10a2:	fb 01       	movw	r30, r22
    10a4:	dc 01       	movw	r26, r24
    10a6:	0d 90       	ld	r0, X+
    10a8:	00 20       	and	r0, r0
    10aa:	e9 f7       	brne	.-6      	; 0x10a6 <strcat+0x4>
    10ac:	11 97       	sbiw	r26, 0x01	; 1
    10ae:	01 90       	ld	r0, Z+
    10b0:	0d 92       	st	X+, r0
    10b2:	00 20       	and	r0, r0
    10b4:	e1 f7       	brne	.-8      	; 0x10ae <strcat+0xc>
    10b6:	08 95       	ret

000010b8 <strcpy>:
    10b8:	fb 01       	movw	r30, r22
    10ba:	dc 01       	movw	r26, r24
    10bc:	01 90       	ld	r0, Z+
    10be:	0d 92       	st	X+, r0
    10c0:	00 20       	and	r0, r0
    10c2:	e1 f7       	brne	.-8      	; 0x10bc <strcpy+0x4>
    10c4:	08 95       	ret

000010c6 <__itoa_ncheck>:
    10c6:	bb 27       	eor	r27, r27
    10c8:	4a 30       	cpi	r20, 0x0A	; 10
    10ca:	31 f4       	brne	.+12     	; 0x10d8 <__itoa_ncheck+0x12>
    10cc:	99 23       	and	r25, r25
    10ce:	22 f4       	brpl	.+8      	; 0x10d8 <__itoa_ncheck+0x12>
    10d0:	bd e2       	ldi	r27, 0x2D	; 45
    10d2:	90 95       	com	r25
    10d4:	81 95       	neg	r24
    10d6:	9f 4f       	sbci	r25, 0xFF	; 255
    10d8:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__utoa_common>

000010dc <__utoa_ncheck>:
    10dc:	bb 27       	eor	r27, r27

000010de <__utoa_common>:
    10de:	fb 01       	movw	r30, r22
    10e0:	55 27       	eor	r21, r21
    10e2:	aa 27       	eor	r26, r26
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	aa 1f       	adc	r26, r26
    10ea:	a4 17       	cp	r26, r20
    10ec:	10 f0       	brcs	.+4      	; 0x10f2 <__utoa_common+0x14>
    10ee:	a4 1b       	sub	r26, r20
    10f0:	83 95       	inc	r24
    10f2:	50 51       	subi	r21, 0x10	; 16
    10f4:	b9 f7       	brne	.-18     	; 0x10e4 <__utoa_common+0x6>
    10f6:	a0 5d       	subi	r26, 0xD0	; 208
    10f8:	aa 33       	cpi	r26, 0x3A	; 58
    10fa:	08 f0       	brcs	.+2      	; 0x10fe <__utoa_common+0x20>
    10fc:	a9 5d       	subi	r26, 0xD9	; 217
    10fe:	a1 93       	st	Z+, r26
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	79 f7       	brne	.-34     	; 0x10e2 <__utoa_common+0x4>
    1104:	b1 11       	cpse	r27, r1
    1106:	b1 93       	st	Z+, r27
    1108:	11 92       	st	Z+, r1
    110a:	cb 01       	movw	r24, r22
    110c:	0c 94 88 08 	jmp	0x1110	; 0x1110 <strrev>

00001110 <strrev>:
    1110:	dc 01       	movw	r26, r24
    1112:	fc 01       	movw	r30, r24
    1114:	67 2f       	mov	r22, r23
    1116:	71 91       	ld	r23, Z+
    1118:	77 23       	and	r23, r23
    111a:	e1 f7       	brne	.-8      	; 0x1114 <strrev+0x4>
    111c:	32 97       	sbiw	r30, 0x02	; 2
    111e:	04 c0       	rjmp	.+8      	; 0x1128 <strrev+0x18>
    1120:	7c 91       	ld	r23, X
    1122:	6d 93       	st	X+, r22
    1124:	70 83       	st	Z, r23
    1126:	62 91       	ld	r22, -Z
    1128:	ae 17       	cp	r26, r30
    112a:	bf 07       	cpc	r27, r31
    112c:	c8 f3       	brcs	.-14     	; 0x1120 <strrev+0x10>
    112e:	08 95       	ret

00001130 <_exit>:
    1130:	f8 94       	cli

00001132 <__stop_program>:
    1132:	ff cf       	rjmp	.-2      	; 0x1132 <__stop_program>
